import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { getCacheKey } from "./getCacheKey";
import { updateDiscoveredEndpointInCache } from "./updateDiscoveredEndpointInCache";
export var endpointDiscoveryMiddleware = function (config, middlewareConfig) {
    return function (next, context) {
        return function (args) { return __awaiter(void 0, void 0, void 0, function () {
            var endpointDiscoveryCommandCtor, isDiscoveredEndpointRequired, identifiers, clientName, commandName, isEndpointDiscoveryEnabled, cacheKey, request, endpoint;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (config.isCustomEndpoint) {
                            if (config.isClientEndpointDiscoveryEnabled) {
                                throw new Error("Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.");
                            }
                            return [2 /*return*/, next(args)];
                        }
                        endpointDiscoveryCommandCtor = config.endpointDiscoveryCommandCtor;
                        isDiscoveredEndpointRequired = middlewareConfig.isDiscoveredEndpointRequired, identifiers = middlewareConfig.identifiers;
                        clientName = context.clientName, commandName = context.commandName;
                        return [4 /*yield*/, config.endpointDiscoveryEnabled()];
                    case 1:
                        isEndpointDiscoveryEnabled = _a.sent();
                        return [4 /*yield*/, getCacheKey(commandName, config, { identifiers: identifiers })];
                    case 2:
                        cacheKey = _a.sent();
                        if (!isDiscoveredEndpointRequired) return [3 /*break*/, 4];
                        // throw error if endpoint discovery is required, and it's explicitly disabled.
                        if (isEndpointDiscoveryEnabled === false) {
                            throw new Error("Endpoint Discovery is disabled but " + commandName + " on " + clientName + " requires it." +
                                " Please check your configurations.");
                        }
                        // call await on Endpoint Discovery API utility so that function blocks
                        // till discovered endpoint is updated in cache
                        return [4 /*yield*/, updateDiscoveredEndpointInCache(config, __assign(__assign({}, middlewareConfig), { commandName: commandName, cacheKey: cacheKey, endpointDiscoveryCommandCtor: endpointDiscoveryCommandCtor }))];
                    case 3:
                        // call await on Endpoint Discovery API utility so that function blocks
                        // till discovered endpoint is updated in cache
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        if (isEndpointDiscoveryEnabled) {
                            // Discover endpoints only if endpoint discovery is explicitly enabled.
                            // Do not call await await on Endpoint Discovery API utility so that function
                            // does not block, the command will use discovered endpoint, if available.
                            updateDiscoveredEndpointInCache(config, __assign(__assign({}, middlewareConfig), { commandName: commandName, cacheKey: cacheKey, endpointDiscoveryCommandCtor: endpointDiscoveryCommandCtor }));
                        }
                        _a.label = 5;
                    case 5:
                        request = args.request;
                        if (cacheKey && HttpRequest.isInstance(request)) {
                            endpoint = config.endpointCache.getEndpoint(cacheKey);
                            if (endpoint) {
                                request.hostname = endpoint;
                            }
                        }
                        return [2 /*return*/, next(args)];
                }
            });
        }); };
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBU3JELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHNUMsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFcEYsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQ3RDLFVBQUMsTUFBNEQsRUFBRSxnQkFBbUQ7SUFDbEgsT0FBQSxVQUNFLElBQStCLEVBQy9CLE9BQWdDO1FBRWxDLE9BQUEsVUFBTyxJQUFnQzs7Ozs7d0JBQ3JDLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFOzRCQUMzQixJQUFJLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRTtnQ0FDM0MsTUFBTSxJQUFJLEtBQUssQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDOzZCQUM1Rjs0QkFDRCxzQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUM7eUJBQ25CO3dCQUVPLDRCQUE0QixHQUFLLE1BQU0sNkJBQVgsQ0FBWTt3QkFDeEMsNEJBQTRCLEdBQWtCLGdCQUFnQiw2QkFBbEMsRUFBRSxXQUFXLEdBQUssZ0JBQWdCLFlBQXJCLENBQXNCO3dCQUMvRCxVQUFVLEdBQWtCLE9BQU8sV0FBekIsRUFBRSxXQUFXLEdBQUssT0FBTyxZQUFaLENBQWE7d0JBQ1QscUJBQU0sTUFBTSxDQUFDLHdCQUF3QixFQUFFLEVBQUE7O3dCQUFwRSwwQkFBMEIsR0FBRyxTQUF1Qzt3QkFDekQscUJBQU0sV0FBVyxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsRUFBRSxXQUFXLGFBQUEsRUFBRSxDQUFDLEVBQUE7O3dCQUFsRSxRQUFRLEdBQUcsU0FBdUQ7NkJBRXBFLDRCQUE0QixFQUE1Qix3QkFBNEI7d0JBQzlCLCtFQUErRTt3QkFDL0UsSUFBSSwwQkFBMEIsS0FBSyxLQUFLLEVBQUU7NEJBQ3hDLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0NBQXNDLFdBQVcsWUFBTyxVQUFVLGtCQUFlO2dDQUMvRSxvQ0FBb0MsQ0FDdkMsQ0FBQzt5QkFDSDt3QkFDRCx1RUFBdUU7d0JBQ3ZFLCtDQUErQzt3QkFDL0MscUJBQU0sK0JBQStCLENBQUMsTUFBTSx3QkFDdkMsZ0JBQWdCLEtBQ25CLFdBQVcsYUFBQSxFQUNYLFFBQVEsVUFBQSxFQUNSLDRCQUE0Qiw4QkFBQSxJQUM1QixFQUFBOzt3QkFQRix1RUFBdUU7d0JBQ3ZFLCtDQUErQzt3QkFDL0MsU0FLRSxDQUFDOzs7d0JBQ0UsSUFBSSwwQkFBMEIsRUFBRTs0QkFDckMsdUVBQXVFOzRCQUN2RSw2RUFBNkU7NEJBQzdFLDBFQUEwRTs0QkFDMUUsK0JBQStCLENBQUMsTUFBTSx3QkFDakMsZ0JBQWdCLEtBQ25CLFdBQVcsYUFBQSxFQUNYLFFBQVEsVUFBQSxFQUNSLDRCQUE0Qiw4QkFBQSxJQUM1QixDQUFDO3lCQUNKOzs7d0JBRU8sT0FBTyxHQUFLLElBQUksUUFBVCxDQUFVO3dCQUN6QixJQUFJLFFBQVEsSUFBSSxXQUFXLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFOzRCQUN6QyxRQUFRLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7NEJBQzVELElBQUksUUFBUSxFQUFFO2dDQUNaLE9BQU8sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDOzZCQUM3Qjt5QkFDRjt3QkFFRCxzQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUM7OzthQUNuQjtJQW5ERCxDQW1EQztBQXZERCxDQXVEQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlcXVlc3QgfSBmcm9tIFwiQGF3cy1zZGsvcHJvdG9jb2wtaHR0cFwiO1xuaW1wb3J0IHtcbiAgQnVpbGRIYW5kbGVyLFxuICBCdWlsZEhhbmRsZXJBcmd1bWVudHMsXG4gIEJ1aWxkSGFuZGxlck91dHB1dCxcbiAgSGFuZGxlckV4ZWN1dGlvbkNvbnRleHQsXG4gIE1ldGFkYXRhQmVhcmVyLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgZ2V0Q2FjaGVLZXkgfSBmcm9tIFwiLi9nZXRDYWNoZUtleVwiO1xuaW1wb3J0IHsgRW5kcG9pbnREaXNjb3ZlcnlNaWRkbGV3YXJlQ29uZmlnIH0gZnJvbSBcIi4vZ2V0RW5kcG9pbnREaXNjb3ZlcnlQbHVnaW5cIjtcbmltcG9ydCB7IEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcsIFByZXZpb3VzbHlSZXNvbHZlZCB9IGZyb20gXCIuL3Jlc29sdmVFbmRwb2ludERpc2NvdmVyeUNvbmZpZ1wiO1xuaW1wb3J0IHsgdXBkYXRlRGlzY292ZXJlZEVuZHBvaW50SW5DYWNoZSB9IGZyb20gXCIuL3VwZGF0ZURpc2NvdmVyZWRFbmRwb2ludEluQ2FjaGVcIjtcblxuZXhwb3J0IGNvbnN0IGVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZSA9XG4gIChjb25maWc6IEVuZHBvaW50RGlzY292ZXJ5UmVzb2x2ZWRDb25maWcgJiBQcmV2aW91c2x5UmVzb2x2ZWQsIG1pZGRsZXdhcmVDb25maWc6IEVuZHBvaW50RGlzY292ZXJ5TWlkZGxld2FyZUNvbmZpZykgPT5cbiAgPE91dHB1dCBleHRlbmRzIE1ldGFkYXRhQmVhcmVyID0gTWV0YWRhdGFCZWFyZXI+KFxuICAgIG5leHQ6IEJ1aWxkSGFuZGxlcjxhbnksIE91dHB1dD4sXG4gICAgY29udGV4dDogSGFuZGxlckV4ZWN1dGlvbkNvbnRleHRcbiAgKTogQnVpbGRIYW5kbGVyPGFueSwgT3V0cHV0PiA9PlxuICBhc3luYyAoYXJnczogQnVpbGRIYW5kbGVyQXJndW1lbnRzPGFueT4pOiBQcm9taXNlPEJ1aWxkSGFuZGxlck91dHB1dDxPdXRwdXQ+PiA9PiB7XG4gICAgaWYgKGNvbmZpZy5pc0N1c3RvbUVuZHBvaW50KSB7XG4gICAgICBpZiAoY29uZmlnLmlzQ2xpZW50RW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ3VzdG9tIGVuZHBvaW50IGlzIHN1cHBsaWVkOyBlbmRwb2ludERpc2NvdmVyeUVuYWJsZWQgbXVzdCBub3QgYmUgdHJ1ZS5gKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXh0KGFyZ3MpO1xuICAgIH1cblxuICAgIGNvbnN0IHsgZW5kcG9pbnREaXNjb3ZlcnlDb21tYW5kQ3RvciB9ID0gY29uZmlnO1xuICAgIGNvbnN0IHsgaXNEaXNjb3ZlcmVkRW5kcG9pbnRSZXF1aXJlZCwgaWRlbnRpZmllcnMgfSA9IG1pZGRsZXdhcmVDb25maWc7XG4gICAgY29uc3QgeyBjbGllbnROYW1lLCBjb21tYW5kTmFtZSB9ID0gY29udGV4dDtcbiAgICBjb25zdCBpc0VuZHBvaW50RGlzY292ZXJ5RW5hYmxlZCA9IGF3YWl0IGNvbmZpZy5lbmRwb2ludERpc2NvdmVyeUVuYWJsZWQoKTtcbiAgICBjb25zdCBjYWNoZUtleSA9IGF3YWl0IGdldENhY2hlS2V5KGNvbW1hbmROYW1lLCBjb25maWcsIHsgaWRlbnRpZmllcnMgfSk7XG5cbiAgICBpZiAoaXNEaXNjb3ZlcmVkRW5kcG9pbnRSZXF1aXJlZCkge1xuICAgICAgLy8gdGhyb3cgZXJyb3IgaWYgZW5kcG9pbnQgZGlzY292ZXJ5IGlzIHJlcXVpcmVkLCBhbmQgaXQncyBleHBsaWNpdGx5IGRpc2FibGVkLlxuICAgICAgaWYgKGlzRW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYEVuZHBvaW50IERpc2NvdmVyeSBpcyBkaXNhYmxlZCBidXQgJHtjb21tYW5kTmFtZX0gb24gJHtjbGllbnROYW1lfSByZXF1aXJlcyBpdC5gICtcbiAgICAgICAgICAgIGAgUGxlYXNlIGNoZWNrIHlvdXIgY29uZmlndXJhdGlvbnMuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgLy8gY2FsbCBhd2FpdCBvbiBFbmRwb2ludCBEaXNjb3ZlcnkgQVBJIHV0aWxpdHkgc28gdGhhdCBmdW5jdGlvbiBibG9ja3NcbiAgICAgIC8vIHRpbGwgZGlzY292ZXJlZCBlbmRwb2ludCBpcyB1cGRhdGVkIGluIGNhY2hlXG4gICAgICBhd2FpdCB1cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlKGNvbmZpZywge1xuICAgICAgICAuLi5taWRkbGV3YXJlQ29uZmlnLFxuICAgICAgICBjb21tYW5kTmFtZSxcbiAgICAgICAgY2FjaGVLZXksXG4gICAgICAgIGVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3IsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGlzRW5kcG9pbnREaXNjb3ZlcnlFbmFibGVkKSB7XG4gICAgICAvLyBEaXNjb3ZlciBlbmRwb2ludHMgb25seSBpZiBlbmRwb2ludCBkaXNjb3ZlcnkgaXMgZXhwbGljaXRseSBlbmFibGVkLlxuICAgICAgLy8gRG8gbm90IGNhbGwgYXdhaXQgYXdhaXQgb24gRW5kcG9pbnQgRGlzY292ZXJ5IEFQSSB1dGlsaXR5IHNvIHRoYXQgZnVuY3Rpb25cbiAgICAgIC8vIGRvZXMgbm90IGJsb2NrLCB0aGUgY29tbWFuZCB3aWxsIHVzZSBkaXNjb3ZlcmVkIGVuZHBvaW50LCBpZiBhdmFpbGFibGUuXG4gICAgICB1cGRhdGVEaXNjb3ZlcmVkRW5kcG9pbnRJbkNhY2hlKGNvbmZpZywge1xuICAgICAgICAuLi5taWRkbGV3YXJlQ29uZmlnLFxuICAgICAgICBjb21tYW5kTmFtZSxcbiAgICAgICAgY2FjaGVLZXksXG4gICAgICAgIGVuZHBvaW50RGlzY292ZXJ5Q29tbWFuZEN0b3IsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCB7IHJlcXVlc3QgfSA9IGFyZ3M7XG4gICAgaWYgKGNhY2hlS2V5ICYmIEh0dHBSZXF1ZXN0LmlzSW5zdGFuY2UocmVxdWVzdCkpIHtcbiAgICAgIGNvbnN0IGVuZHBvaW50ID0gY29uZmlnLmVuZHBvaW50Q2FjaGUuZ2V0RW5kcG9pbnQoY2FjaGVLZXkpO1xuICAgICAgaWYgKGVuZHBvaW50KSB7XG4gICAgICAgIHJlcXVlc3QuaG9zdG5hbWUgPSBlbmRwb2ludDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dChhcmdzKTtcbiAgfTtcbiJdfQ==