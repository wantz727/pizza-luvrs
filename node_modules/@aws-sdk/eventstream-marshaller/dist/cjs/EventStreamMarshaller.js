"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventStreamMarshaller = void 0;
const crc32_1 = require("@aws-crypto/crc32");
const HeaderMarshaller_1 = require("./HeaderMarshaller");
const splitMessage_1 = require("./splitMessage");
/**
 * A marshaller that can convert binary-packed event stream messages into
 * JavaScript objects and back again into their binary format.
 */
class EventStreamMarshaller {
    constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
    }
    /**
     * Convert a structured JavaScript object with tagged headers into a binary
     * event stream message.
     */
    marshall({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        // Format message
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        // Write trailing message checksum
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    }
    /**
     * Convert a binary event stream message into a JavaScript object with an
     * opaque, binary body and tagged, parsed headers.
     */
    unmarshall(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
    }
    /**
     * Convert a structured JavaScript object with tagged headers into a binary
     * event stream message header.
     */
    formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    }
}
exports.EventStreamMarshaller = EventStreamMarshaller;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdHJlYW1NYXJzaGFsbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0V2ZW50U3RyZWFtTWFyc2hhbGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBMEM7QUFJMUMseURBQXNEO0FBQ3RELGlEQUE4QztBQUU5Qzs7O0dBR0c7QUFDSCxNQUFhLHFCQUFxQjtJQUdoQyxZQUFZLE1BQWUsRUFBRSxRQUFpQjtRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxtQ0FBZ0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFXO1FBQzdDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDekQsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUV6RCxNQUFNLEdBQUcsR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNuQyxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sUUFBUSxHQUFHLElBQUksYUFBSyxFQUFFLENBQUM7UUFFN0IsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2RSxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNyQixHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBRXZDLGtDQUFrQztRQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV6RixPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRDs7O09BR0c7SUFDSCxVQUFVLENBQUMsT0FBd0I7UUFDakMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFBLDJCQUFZLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFFaEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ2pFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxhQUFhLENBQUMsVUFBMEI7UUFDdEMsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Q0FDRjtBQWpERCxzREFpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDcmMzMiB9IGZyb20gXCJAYXdzLWNyeXB0by9jcmMzMlwiO1xuaW1wb3J0IHsgTWVzc2FnZSwgTWVzc2FnZUhlYWRlcnMgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcbmltcG9ydCB7IERlY29kZXIsIEVuY29kZXIgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuaW1wb3J0IHsgSGVhZGVyTWFyc2hhbGxlciB9IGZyb20gXCIuL0hlYWRlck1hcnNoYWxsZXJcIjtcbmltcG9ydCB7IHNwbGl0TWVzc2FnZSB9IGZyb20gXCIuL3NwbGl0TWVzc2FnZVwiO1xuXG4vKipcbiAqIEEgbWFyc2hhbGxlciB0aGF0IGNhbiBjb252ZXJ0IGJpbmFyeS1wYWNrZWQgZXZlbnQgc3RyZWFtIG1lc3NhZ2VzIGludG9cbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBhbmQgYmFjayBhZ2FpbiBpbnRvIHRoZWlyIGJpbmFyeSBmb3JtYXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFN0cmVhbU1hcnNoYWxsZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IGhlYWRlck1hcnNoYWxsZXI6IEhlYWRlck1hcnNoYWxsZXI7XG5cbiAgY29uc3RydWN0b3IodG9VdGY4OiBFbmNvZGVyLCBmcm9tVXRmODogRGVjb2Rlcikge1xuICAgIHRoaXMuaGVhZGVyTWFyc2hhbGxlciA9IG5ldyBIZWFkZXJNYXJzaGFsbGVyKHRvVXRmOCwgZnJvbVV0ZjgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBzdHJ1Y3R1cmVkIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggdGFnZ2VkIGhlYWRlcnMgaW50byBhIGJpbmFyeVxuICAgKiBldmVudCBzdHJlYW0gbWVzc2FnZS5cbiAgICovXG4gIG1hcnNoYWxsKHsgaGVhZGVyczogcmF3SGVhZGVycywgYm9keSB9OiBNZXNzYWdlKTogVWludDhBcnJheSB7XG4gICAgY29uc3QgaGVhZGVycyA9IHRoaXMuaGVhZGVyTWFyc2hhbGxlci5mb3JtYXQocmF3SGVhZGVycyk7XG4gICAgY29uc3QgbGVuZ3RoID0gaGVhZGVycy5ieXRlTGVuZ3RoICsgYm9keS5ieXRlTGVuZ3RoICsgMTY7XG5cbiAgICBjb25zdCBvdXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xuICAgIGNvbnN0IHZpZXcgPSBuZXcgRGF0YVZpZXcob3V0LmJ1ZmZlciwgb3V0LmJ5dGVPZmZzZXQsIG91dC5ieXRlTGVuZ3RoKTtcbiAgICBjb25zdCBjaGVja3N1bSA9IG5ldyBDcmMzMigpO1xuXG4gICAgLy8gRm9ybWF0IG1lc3NhZ2VcbiAgICB2aWV3LnNldFVpbnQzMigwLCBsZW5ndGgsIGZhbHNlKTtcbiAgICB2aWV3LnNldFVpbnQzMig0LCBoZWFkZXJzLmJ5dGVMZW5ndGgsIGZhbHNlKTtcbiAgICB2aWV3LnNldFVpbnQzMig4LCBjaGVja3N1bS51cGRhdGUob3V0LnN1YmFycmF5KDAsIDgpKS5kaWdlc3QoKSwgZmFsc2UpO1xuICAgIG91dC5zZXQoaGVhZGVycywgMTIpO1xuICAgIG91dC5zZXQoYm9keSwgaGVhZGVycy5ieXRlTGVuZ3RoICsgMTIpO1xuXG4gICAgLy8gV3JpdGUgdHJhaWxpbmcgbWVzc2FnZSBjaGVja3N1bVxuICAgIHZpZXcuc2V0VWludDMyKGxlbmd0aCAtIDQsIGNoZWNrc3VtLnVwZGF0ZShvdXQuc3ViYXJyYXkoOCwgbGVuZ3RoIC0gNCkpLmRpZ2VzdCgpLCBmYWxzZSk7XG5cbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYSBiaW5hcnkgZXZlbnQgc3RyZWFtIG1lc3NhZ2UgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0IHdpdGggYW5cbiAgICogb3BhcXVlLCBiaW5hcnkgYm9keSBhbmQgdGFnZ2VkLCBwYXJzZWQgaGVhZGVycy5cbiAgICovXG4gIHVubWFyc2hhbGwobWVzc2FnZTogQXJyYXlCdWZmZXJWaWV3KTogTWVzc2FnZSB7XG4gICAgY29uc3QgeyBoZWFkZXJzLCBib2R5IH0gPSBzcGxpdE1lc3NhZ2UobWVzc2FnZSk7XG5cbiAgICByZXR1cm4geyBoZWFkZXJzOiB0aGlzLmhlYWRlck1hcnNoYWxsZXIucGFyc2UoaGVhZGVycyksIGJvZHkgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IGEgc3RydWN0dXJlZCBKYXZhU2NyaXB0IG9iamVjdCB3aXRoIHRhZ2dlZCBoZWFkZXJzIGludG8gYSBiaW5hcnlcbiAgICogZXZlbnQgc3RyZWFtIG1lc3NhZ2UgaGVhZGVyLlxuICAgKi9cbiAgZm9ybWF0SGVhZGVycyhyYXdIZWFkZXJzOiBNZXNzYWdlSGVhZGVycyk6IFVpbnQ4QXJyYXkge1xuICAgIHJldHVybiB0aGlzLmhlYWRlck1hcnNoYWxsZXIuZm9ybWF0KHJhd0hlYWRlcnMpO1xuICB9XG59XG4iXX0=