import { __assign, __awaiter, __generator } from "tslib";
import { SignatureV4 } from "@aws-sdk/signature-v4";
import { CrtSignerV4 } from "@aws-sdk/signature-v4-crt";
/**
 * A SigV4-compatible signer for S3 service. In order to support SigV4a algorithm according to the operation input
 * dynamically, the signer wraps native module SigV4a signer and JS SigV4 signer. It signs the request with SigV4a
 * algorithm if the request needs to be signed with `*` region. Otherwise, it signs the request with normal SigV4
 * signer.
 * Note that SigV4a signer is only supported in Node.js now because it depends on a native dependency.
 * @private
 */
var S3SignatureV4 = /** @class */ (function () {
    function S3SignatureV4(options) {
        this.sigv4Signer = new SignatureV4(options);
        if (options.runtime === "node") {
            this.sigv4aSigner = new CrtSignerV4(__assign(__assign({}, options), { signingAlgorithm: 1 }));
        }
    }
    S3SignatureV4.prototype.sign = function (requestToSign, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (!this.sigv4aSigner)
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2 /*return*/, this.sigv4aSigner.sign(requestToSign, options)];
                }
                return [2 /*return*/, this.sigv4Signer.sign(requestToSign, options)];
            });
        });
    };
    S3SignatureV4.prototype.presign = function (originalRequest, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (options.signingRegion === "*") {
                    if (!this.sigv4aSigner)
                        throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
                    return [2 /*return*/, this.sigv4aSigner.presign(originalRequest, options)];
                }
                return [2 /*return*/, this.sigv4Signer.presign(originalRequest, options)];
            });
        });
    };
    return S3SignatureV4;
}());
export { S3SignatureV4 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUEwQyxNQUFNLHVCQUF1QixDQUFDO0FBQzVGLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQWN4RDs7Ozs7OztHQU9HO0FBQ0g7SUFJRSx1QkFBWSxPQUF1QjtRQUNqQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFdBQVcsdUJBQU0sT0FBTyxLQUFFLGdCQUFnQixFQUFFLENBQUMsSUFBRyxDQUFDO1NBQzFFO0lBQ0gsQ0FBQztJQUVZLDRCQUFJLEdBQWpCLFVBQWtCLGFBQTBCLEVBQUUsT0FBcUM7UUFBckMsd0JBQUEsRUFBQSxZQUFxQzs7O2dCQUNqRixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO29CQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7d0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztvQkFDbEgsc0JBQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxFQUFDO2lCQUN2RDtnQkFDRCxzQkFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLEVBQUM7OztLQUN0RDtJQUVZLCtCQUFPLEdBQXBCLFVBQXFCLGVBQTRCLEVBQUUsT0FBd0M7UUFBeEMsd0JBQUEsRUFBQSxZQUF3Qzs7O2dCQUN6RixJQUFJLE9BQU8sQ0FBQyxhQUFhLEtBQUssR0FBRyxFQUFFO29CQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7d0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztvQkFDbEgsc0JBQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxFQUFDO2lCQUM1RDtnQkFDRCxzQkFBTyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLEVBQUM7OztLQUMzRDtJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQTVCRCxJQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpZ25hdHVyZVY0LCBTaWduYXR1cmVWNENyeXB0b0luaXQsIFNpZ25hdHVyZVY0SW5pdCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjRcIjtcbmltcG9ydCB7IENydFNpZ25lclY0IH0gZnJvbSBcIkBhd3Mtc2RrL3NpZ25hdHVyZS12NC1jcnRcIjtcbmltcG9ydCB7XG4gIEh0dHBSZXF1ZXN0LFxuICBSZXF1ZXN0UHJlc2lnbmVyLFxuICBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyxcbiAgUmVxdWVzdFNpZ25lcixcbiAgUmVxdWVzdFNpZ25pbmdBcmd1bWVudHMsXG59IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBTM1NpZ25lclY0SW5pdCA9IFNpZ25hdHVyZVY0SW5pdCAmXG4gIFNpZ25hdHVyZVY0Q3J5cHRvSW5pdCAmIHtcbiAgICBydW50aW1lPzogc3RyaW5nO1xuICB9O1xuXG4vKipcbiAqIEEgU2lnVjQtY29tcGF0aWJsZSBzaWduZXIgZm9yIFMzIHNlcnZpY2UuIEluIG9yZGVyIHRvIHN1cHBvcnQgU2lnVjRhIGFsZ29yaXRobSBhY2NvcmRpbmcgdG8gdGhlIG9wZXJhdGlvbiBpbnB1dFxuICogZHluYW1pY2FsbHksIHRoZSBzaWduZXIgd3JhcHMgbmF0aXZlIG1vZHVsZSBTaWdWNGEgc2lnbmVyIGFuZCBKUyBTaWdWNCBzaWduZXIuIEl0IHNpZ25zIHRoZSByZXF1ZXN0IHdpdGggU2lnVjRhXG4gKiBhbGdvcml0aG0gaWYgdGhlIHJlcXVlc3QgbmVlZHMgdG8gYmUgc2lnbmVkIHdpdGggYCpgIHJlZ2lvbi4gT3RoZXJ3aXNlLCBpdCBzaWducyB0aGUgcmVxdWVzdCB3aXRoIG5vcm1hbCBTaWdWNFxuICogc2lnbmVyLlxuICogTm90ZSB0aGF0IFNpZ1Y0YSBzaWduZXIgaXMgb25seSBzdXBwb3J0ZWQgaW4gTm9kZS5qcyBub3cgYmVjYXVzZSBpdCBkZXBlbmRzIG9uIGEgbmF0aXZlIGRlcGVuZGVuY3kuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgUzNTaWduYXR1cmVWNCBpbXBsZW1lbnRzIFJlcXVlc3RQcmVzaWduZXIsIFJlcXVlc3RTaWduZXIge1xuICBwcml2YXRlIHJlYWRvbmx5IHNpZ3Y0U2lnbmVyOiBTaWduYXR1cmVWNDtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWd2NGFTaWduZXI/OiBDcnRTaWduZXJWNDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBTM1NpZ25lclY0SW5pdCkge1xuICAgIHRoaXMuc2lndjRTaWduZXIgPSBuZXcgU2lnbmF0dXJlVjQob3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMucnVudGltZSA9PT0gXCJub2RlXCIpIHtcbiAgICAgIHRoaXMuc2lndjRhU2lnbmVyID0gbmV3IENydFNpZ25lclY0KHsgLi4ub3B0aW9ucywgc2lnbmluZ0FsZ29yaXRobTogMSB9KTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgc2lnbihyZXF1ZXN0VG9TaWduOiBIdHRwUmVxdWVzdCwgb3B0aW9uczogUmVxdWVzdFNpZ25pbmdBcmd1bWVudHMgPSB7fSk6IFByb21pc2U8SHR0cFJlcXVlc3Q+IHtcbiAgICBpZiAob3B0aW9ucy5zaWduaW5nUmVnaW9uID09PSBcIipcIikge1xuICAgICAgaWYgKCF0aGlzLnNpZ3Y0YVNpZ25lcilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhpcyByZXF1ZXN0IHJlcXVpcmVzIHNpZ25pbmcgd2l0aCBTaWdWNEFzeW1tZXRyaWMgYWxnb3JpdGhtLiBJdCdzIG9ubHkgYXZhaWxhYmxlIGluIE5vZGUuanNcIik7XG4gICAgICByZXR1cm4gdGhpcy5zaWd2NGFTaWduZXIuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRTaWduZXIuc2lnbihyZXF1ZXN0VG9TaWduLCBvcHRpb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBwcmVzaWduKG9yaWdpbmFsUmVxdWVzdDogSHR0cFJlcXVlc3QsIG9wdGlvbnM6IFJlcXVlc3RQcmVzaWduaW5nQXJndW1lbnRzID0ge30pOiBQcm9taXNlPEh0dHBSZXF1ZXN0PiB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICghdGhpcy5zaWd2NGFTaWduZXIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuc2lndjRhU2lnbmVyLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2lndjRTaWduZXIucHJlc2lnbihvcmlnaW5hbFJlcXVlc3QsIG9wdGlvbnMpO1xuICB9XG59XG4iXX0=