"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3SignatureV4 = void 0;
const signature_v4_1 = require("@aws-sdk/signature-v4");
const signature_v4_crt_1 = require("@aws-sdk/signature-v4-crt");
/**
 * A SigV4-compatible signer for S3 service. In order to support SigV4a algorithm according to the operation input
 * dynamically, the signer wraps native module SigV4a signer and JS SigV4 signer. It signs the request with SigV4a
 * algorithm if the request needs to be signed with `*` region. Otherwise, it signs the request with normal SigV4
 * signer.
 * Note that SigV4a signer is only supported in Node.js now because it depends on a native dependency.
 * @private
 */
class S3SignatureV4 {
    constructor(options) {
        this.sigv4Signer = new signature_v4_1.SignatureV4(options);
        if (options.runtime === "node") {
            this.sigv4aSigner = new signature_v4_crt_1.CrtSignerV4({ ...options, signingAlgorithm: 1 });
        }
    }
    async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
            if (!this.sigv4aSigner)
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.sigv4aSigner.sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
    }
    async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
            if (!this.sigv4aSigner)
                throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
            return this.sigv4aSigner.presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
    }
}
exports.S3SignatureV4 = S3SignatureV4;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUzNTaWduYXR1cmVWNC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9TM1NpZ25hdHVyZVY0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHdEQUE0RjtBQUM1RixnRUFBd0Q7QUFjeEQ7Ozs7Ozs7R0FPRztBQUNILE1BQWEsYUFBYTtJQUl4QixZQUFZLE9BQXVCO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSwwQkFBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzVDLElBQUksT0FBTyxDQUFDLE9BQU8sS0FBSyxNQUFNLEVBQUU7WUFDOUIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLDhCQUFXLENBQUMsRUFBRSxHQUFHLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzFFO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBMEIsRUFBRSxVQUFtQyxFQUFFO1FBQ2pGLElBQUksT0FBTyxDQUFDLGFBQWEsS0FBSyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZO2dCQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDhGQUE4RixDQUFDLENBQUM7WUFDbEgsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDdkQ7UUFDRCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sS0FBSyxDQUFDLE9BQU8sQ0FBQyxlQUE0QixFQUFFLFVBQXNDLEVBQUU7UUFDekYsSUFBSSxPQUFPLENBQUMsYUFBYSxLQUFLLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVk7Z0JBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEZBQThGLENBQUMsQ0FBQztZQUNsSCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVELENBQUM7Q0FDRjtBQTVCRCxzQ0E0QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWduYXR1cmVWNCwgU2lnbmF0dXJlVjRDcnlwdG9Jbml0LCBTaWduYXR1cmVWNEluaXQgfSBmcm9tIFwiQGF3cy1zZGsvc2lnbmF0dXJlLXY0XCI7XG5pbXBvcnQgeyBDcnRTaWduZXJWNCB9IGZyb20gXCJAYXdzLXNkay9zaWduYXR1cmUtdjQtY3J0XCI7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgUmVxdWVzdFByZXNpZ25lcixcbiAgUmVxdWVzdFByZXNpZ25pbmdBcmd1bWVudHMsXG4gIFJlcXVlc3RTaWduZXIsXG4gIFJlcXVlc3RTaWduaW5nQXJndW1lbnRzLFxufSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxuZXhwb3J0IHR5cGUgUzNTaWduZXJWNEluaXQgPSBTaWduYXR1cmVWNEluaXQgJlxuICBTaWduYXR1cmVWNENyeXB0b0luaXQgJiB7XG4gICAgcnVudGltZT86IHN0cmluZztcbiAgfTtcblxuLyoqXG4gKiBBIFNpZ1Y0LWNvbXBhdGlibGUgc2lnbmVyIGZvciBTMyBzZXJ2aWNlLiBJbiBvcmRlciB0byBzdXBwb3J0IFNpZ1Y0YSBhbGdvcml0aG0gYWNjb3JkaW5nIHRvIHRoZSBvcGVyYXRpb24gaW5wdXRcbiAqIGR5bmFtaWNhbGx5LCB0aGUgc2lnbmVyIHdyYXBzIG5hdGl2ZSBtb2R1bGUgU2lnVjRhIHNpZ25lciBhbmQgSlMgU2lnVjQgc2lnbmVyLiBJdCBzaWducyB0aGUgcmVxdWVzdCB3aXRoIFNpZ1Y0YVxuICogYWxnb3JpdGhtIGlmIHRoZSByZXF1ZXN0IG5lZWRzIHRvIGJlIHNpZ25lZCB3aXRoIGAqYCByZWdpb24uIE90aGVyd2lzZSwgaXQgc2lnbnMgdGhlIHJlcXVlc3Qgd2l0aCBub3JtYWwgU2lnVjRcbiAqIHNpZ25lci5cbiAqIE5vdGUgdGhhdCBTaWdWNGEgc2lnbmVyIGlzIG9ubHkgc3VwcG9ydGVkIGluIE5vZGUuanMgbm93IGJlY2F1c2UgaXQgZGVwZW5kcyBvbiBhIG5hdGl2ZSBkZXBlbmRlbmN5LlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFMzU2lnbmF0dXJlVjQgaW1wbGVtZW50cyBSZXF1ZXN0UHJlc2lnbmVyLCBSZXF1ZXN0U2lnbmVyIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzaWd2NFNpZ25lcjogU2lnbmF0dXJlVjQ7XG4gIHByaXZhdGUgcmVhZG9ubHkgc2lndjRhU2lnbmVyPzogQ3J0U2lnbmVyVjQ7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogUzNTaWduZXJWNEluaXQpIHtcbiAgICB0aGlzLnNpZ3Y0U2lnbmVyID0gbmV3IFNpZ25hdHVyZVY0KG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLnJ1bnRpbWUgPT09IFwibm9kZVwiKSB7XG4gICAgICB0aGlzLnNpZ3Y0YVNpZ25lciA9IG5ldyBDcnRTaWduZXJWNCh7IC4uLm9wdGlvbnMsIHNpZ25pbmdBbGdvcml0aG06IDEgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGFzeW5jIHNpZ24ocmVxdWVzdFRvU2lnbjogSHR0cFJlcXVlc3QsIG9wdGlvbnM6IFJlcXVlc3RTaWduaW5nQXJndW1lbnRzID0ge30pOiBQcm9taXNlPEh0dHBSZXF1ZXN0PiB7XG4gICAgaWYgKG9wdGlvbnMuc2lnbmluZ1JlZ2lvbiA9PT0gXCIqXCIpIHtcbiAgICAgIGlmICghdGhpcy5zaWd2NGFTaWduZXIpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoaXMgcmVxdWVzdCByZXF1aXJlcyBzaWduaW5nIHdpdGggU2lnVjRBc3ltbWV0cmljIGFsZ29yaXRobS4gSXQncyBvbmx5IGF2YWlsYWJsZSBpbiBOb2RlLmpzXCIpO1xuICAgICAgcmV0dXJuIHRoaXMuc2lndjRhU2lnbmVyLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnNpZ24ocmVxdWVzdFRvU2lnbiwgb3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgcHJlc2lnbihvcmlnaW5hbFJlcXVlc3Q6IEh0dHBSZXF1ZXN0LCBvcHRpb25zOiBSZXF1ZXN0UHJlc2lnbmluZ0FyZ3VtZW50cyA9IHt9KTogUHJvbWlzZTxIdHRwUmVxdWVzdD4ge1xuICAgIGlmIChvcHRpb25zLnNpZ25pbmdSZWdpb24gPT09IFwiKlwiKSB7XG4gICAgICBpZiAoIXRoaXMuc2lndjRhU2lnbmVyKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGlzIHJlcXVlc3QgcmVxdWlyZXMgc2lnbmluZyB3aXRoIFNpZ1Y0QXN5bW1ldHJpYyBhbGdvcml0aG0uIEl0J3Mgb25seSBhdmFpbGFibGUgaW4gTm9kZS5qc1wiKTtcbiAgICAgIHJldHVybiB0aGlzLnNpZ3Y0YVNpZ25lci5wcmVzaWduKG9yaWdpbmFsUmVxdWVzdCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNpZ3Y0U2lnbmVyLnByZXNpZ24ob3JpZ2luYWxSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxufVxuIl19