"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThrow200ExceptionsPlugin = exports.throw200ExceptionsMiddlewareOptions = exports.throw200ExceptionsMiddleware = void 0;
const protocol_http_1 = require("@aws-sdk/protocol-http");
/**
 * In case of an internal error/terminated connection, S3 operations may return 200 errors. CopyObject, UploadPartCopy,
 * CompleteMultipartUpload may return empty payload or payload with only xml Preamble.
 * @internal
 */
const throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
    const result = await next(args);
    const { response } = result;
    if (!protocol_http_1.HttpResponse.isInstance(response))
        return result;
    const { statusCode, body } = response;
    if (statusCode < 200 && statusCode >= 300)
        return result;
    // Throw 2XX response that's either an error or has empty body.
    const bodyBytes = await collectBody(body, config);
    const bodyString = await collectBodyString(bodyBytes, config);
    if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
    }
    if (bodyString && bodyString.match("<Error>")) {
        // Set the error code to 4XX so that error deserializer can parse them
        response.statusCode = 400;
    }
    // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.
    // So that the deserializer can consume the body as normal.
    response.body = bodyBytes;
    return result;
};
exports.throw200ExceptionsMiddleware = throw200ExceptionsMiddleware;
// Collect low-level response body stream to Uint8Array.
const collectBody = (streamBody = new Uint8Array(), context) => {
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
/**
 * @internal
 */
exports.throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: ["THROW_200_EXCEPTIONS", "S3"],
    name: "throw200ExceptionsMiddleware",
    override: true,
};
/**
 *
 * @internal
 */
const getThrow200ExceptionsPlugin = (config) => ({
    applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports.throw200ExceptionsMiddleware)(config), exports.throw200ExceptionsMiddlewareOptions);
    },
});
exports.getThrow200ExceptionsPlugin = getThrow200ExceptionsPlugin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhyb3ctMjAwLWV4Y2VwdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdGhyb3ctMjAwLWV4Y2VwdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXNEO0FBUXREOzs7O0dBSUc7QUFDSSxNQUFNLDRCQUE0QixHQUN2QyxDQUFDLE1BQTBCLEVBQW1DLEVBQUUsQ0FDaEUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUNULEtBQUssRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNiLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2hDLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUM7SUFDNUIsSUFBSSxDQUFDLDRCQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQztRQUFFLE9BQU8sTUFBTSxDQUFDO0lBQ3RELE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDO0lBQ3RDLElBQUksVUFBVSxHQUFHLEdBQUcsSUFBSSxVQUFVLElBQUksR0FBRztRQUFFLE9BQU8sTUFBTSxDQUFDO0lBRXpELCtEQUErRDtJQUMvRCxNQUFNLFNBQVMsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDOUQsSUFBSSxTQUFTLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMxQixNQUFNLEdBQUcsR0FBRyxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBQzVDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDO1FBQzNCLE1BQU0sR0FBRyxDQUFDO0tBQ1g7SUFDRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzdDLHNFQUFzRTtRQUN0RSxRQUFRLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztLQUMzQjtJQUVELHlHQUF5RztJQUN6RywyREFBMkQ7SUFDM0QsUUFBUSxDQUFDLElBQUksR0FBRyxTQUFTLENBQUM7SUFDMUIsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBM0JTLFFBQUEsNEJBQTRCLGdDQTJCckM7QUFFSix3REFBd0Q7QUFDeEQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxhQUFrQixJQUFJLFVBQVUsRUFBRSxFQUFFLE9BQTJCLEVBQXVCLEVBQUU7SUFDM0csSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1FBQ3BDLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNwQztJQUNELE9BQU8sT0FBTyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksVUFBVSxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDLENBQUM7QUFFRixpREFBaUQ7QUFDakQsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLFVBQWUsRUFBRSxPQUEyQixFQUFtQixFQUFFLENBQzFGLFdBQVcsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFN0U7O0dBRUc7QUFDVSxRQUFBLG1DQUFtQyxHQUE4QjtJQUM1RSxRQUFRLEVBQUUsT0FBTztJQUNqQixZQUFZLEVBQUUsd0JBQXdCO0lBQ3RDLElBQUksRUFBRSxDQUFDLHNCQUFzQixFQUFFLElBQUksQ0FBQztJQUNwQyxJQUFJLEVBQUUsOEJBQThCO0lBQ3BDLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQztBQUVGOzs7R0FHRztBQUNJLE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxNQUEwQixFQUF1QixFQUFFLENBQUMsQ0FBQztJQUMvRixZQUFZLEVBQUUsQ0FBQyxXQUFXLEVBQUUsRUFBRTtRQUM1QixXQUFXLENBQUMsYUFBYSxDQUFDLElBQUEsb0NBQTRCLEVBQUMsTUFBTSxDQUFDLEVBQUUsMkNBQW1DLENBQUMsQ0FBQztJQUN2RyxDQUFDO0NBQ0YsQ0FBQyxDQUFDO0FBSlUsUUFBQSwyQkFBMkIsK0JBSXJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlIH0gZnJvbSBcIkBhd3Mtc2RrL3Byb3RvY29sLWh0dHBcIjtcbmltcG9ydCB7IERlc2VyaWFsaXplTWlkZGxld2FyZSwgRW5jb2RlciwgUGx1Z2dhYmxlLCBSZWxhdGl2ZU1pZGRsZXdhcmVPcHRpb25zLCBTdHJlYW1Db2xsZWN0b3IgfSBmcm9tIFwiQGF3cy1zZGsvdHlwZXNcIjtcblxudHlwZSBQcmV2aW91c2x5UmVzb2x2ZWQgPSB7XG4gIHN0cmVhbUNvbGxlY3RvcjogU3RyZWFtQ29sbGVjdG9yO1xuICB1dGY4RW5jb2RlcjogRW5jb2Rlcjtcbn07XG5cbi8qKlxuICogSW4gY2FzZSBvZiBhbiBpbnRlcm5hbCBlcnJvci90ZXJtaW5hdGVkIGNvbm5lY3Rpb24sIFMzIG9wZXJhdGlvbnMgbWF5IHJldHVybiAyMDAgZXJyb3JzLiBDb3B5T2JqZWN0LCBVcGxvYWRQYXJ0Q29weSxcbiAqIENvbXBsZXRlTXVsdGlwYXJ0VXBsb2FkIG1heSByZXR1cm4gZW1wdHkgcGF5bG9hZCBvciBwYXlsb2FkIHdpdGggb25seSB4bWwgUHJlYW1ibGUuXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGNvbnN0IHRocm93MjAwRXhjZXB0aW9uc01pZGRsZXdhcmUgPVxuICAoY29uZmlnOiBQcmV2aW91c2x5UmVzb2x2ZWQpOiBEZXNlcmlhbGl6ZU1pZGRsZXdhcmU8YW55LCBhbnk+ID0+XG4gIChuZXh0KSA9PlxuICBhc3luYyAoYXJncykgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IG5leHQoYXJncyk7XG4gICAgY29uc3QgeyByZXNwb25zZSB9ID0gcmVzdWx0O1xuICAgIGlmICghSHR0cFJlc3BvbnNlLmlzSW5zdGFuY2UocmVzcG9uc2UpKSByZXR1cm4gcmVzdWx0O1xuICAgIGNvbnN0IHsgc3RhdHVzQ29kZSwgYm9keSB9ID0gcmVzcG9uc2U7XG4gICAgaWYgKHN0YXR1c0NvZGUgPCAyMDAgJiYgc3RhdHVzQ29kZSA+PSAzMDApIHJldHVybiByZXN1bHQ7XG5cbiAgICAvLyBUaHJvdyAyWFggcmVzcG9uc2UgdGhhdCdzIGVpdGhlciBhbiBlcnJvciBvciBoYXMgZW1wdHkgYm9keS5cbiAgICBjb25zdCBib2R5Qnl0ZXMgPSBhd2FpdCBjb2xsZWN0Qm9keShib2R5LCBjb25maWcpO1xuICAgIGNvbnN0IGJvZHlTdHJpbmcgPSBhd2FpdCBjb2xsZWN0Qm9keVN0cmluZyhib2R5Qnl0ZXMsIGNvbmZpZyk7XG4gICAgaWYgKGJvZHlCeXRlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcIlMzIGFib3J0ZWQgcmVxdWVzdFwiKTtcbiAgICAgIGVyci5uYW1lID0gXCJJbnRlcm5hbEVycm9yXCI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIGlmIChib2R5U3RyaW5nICYmIGJvZHlTdHJpbmcubWF0Y2goXCI8RXJyb3I+XCIpKSB7XG4gICAgICAvLyBTZXQgdGhlIGVycm9yIGNvZGUgdG8gNFhYIHNvIHRoYXQgZXJyb3IgZGVzZXJpYWxpemVyIGNhbiBwYXJzZSB0aGVtXG4gICAgICByZXNwb25zZS5zdGF0dXNDb2RlID0gNDAwO1xuICAgIH1cblxuICAgIC8vIEJvZHkgc3RyZWFtIGlzIGNvbnN1bWVkIGFuZCBwYXVzZWQgYXQgdGhpcyBwb2ludC4gU28gcmVwbGFjZSB0aGUgcmVzcG9uc2UuYm9keSB0byB0aGUgY29sbGVjdGVkIGJ5dGVzLlxuICAgIC8vIFNvIHRoYXQgdGhlIGRlc2VyaWFsaXplciBjYW4gY29uc3VtZSB0aGUgYm9keSBhcyBub3JtYWwuXG4gICAgcmVzcG9uc2UuYm9keSA9IGJvZHlCeXRlcztcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4vLyBDb2xsZWN0IGxvdy1sZXZlbCByZXNwb25zZSBib2R5IHN0cmVhbSB0byBVaW50OEFycmF5LlxuY29uc3QgY29sbGVjdEJvZHkgPSAoc3RyZWFtQm9keTogYW55ID0gbmV3IFVpbnQ4QXJyYXkoKSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxVaW50OEFycmF5PiA9PiB7XG4gIGlmIChzdHJlYW1Cb2R5IGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RyZWFtQm9keSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRleHQuc3RyZWFtQ29sbGVjdG9yKHN0cmVhbUJvZHkpIHx8IFByb21pc2UucmVzb2x2ZShuZXcgVWludDhBcnJheSgpKTtcbn07XG5cbi8vIEVuY29kZSBVaW50OEFycmF5IGRhdGEgaW50byBzdHJpbmcgd2l0aCB1dGYtOC5cbmNvbnN0IGNvbGxlY3RCb2R5U3RyaW5nID0gKHN0cmVhbUJvZHk6IGFueSwgY29udGV4dDogUHJldmlvdXNseVJlc29sdmVkKTogUHJvbWlzZTxzdHJpbmc+ID0+XG4gIGNvbGxlY3RCb2R5KHN0cmVhbUJvZHksIGNvbnRleHQpLnRoZW4oKGJvZHkpID0+IGNvbnRleHQudXRmOEVuY29kZXIoYm9keSkpO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgdGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZU9wdGlvbnM6IFJlbGF0aXZlTWlkZGxld2FyZU9wdGlvbnMgPSB7XG4gIHJlbGF0aW9uOiBcImFmdGVyXCIsXG4gIHRvTWlkZGxld2FyZTogXCJkZXNlcmlhbGl6ZXJNaWRkbGV3YXJlXCIsXG4gIHRhZ3M6IFtcIlRIUk9XXzIwMF9FWENFUFRJT05TXCIsIFwiUzNcIl0sXG4gIG5hbWU6IFwidGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZVwiLFxuICBvdmVycmlkZTogdHJ1ZSxcbn07XG5cbi8qKlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgY29uc3QgZ2V0VGhyb3cyMDBFeGNlcHRpb25zUGx1Z2luID0gKGNvbmZpZzogUHJldmlvdXNseVJlc29sdmVkKTogUGx1Z2dhYmxlPGFueSwgYW55PiA9PiAoe1xuICBhcHBseVRvU3RhY2s6IChjbGllbnRTdGFjaykgPT4ge1xuICAgIGNsaWVudFN0YWNrLmFkZFJlbGF0aXZlVG8odGhyb3cyMDBFeGNlcHRpb25zTWlkZGxld2FyZShjb25maWcpLCB0aHJvdzIwMEV4Y2VwdGlvbnNNaWRkbGV3YXJlT3B0aW9ucyk7XG4gIH0sXG59KTtcbiJdfQ==