"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToNative = void 0;
/**
 * Convert a DynamoDB AttributeValue object to its equivalent JavaScript type.
 *
 * @param {AttributeValue} data - The DynamoDB record to convert to JavaScript type.
 * @param {unmarshallOptions} options - An optional configuration object for `convertToNative`.
 */
const convertToNative = (data, options) => {
    for (const [key, value] of Object.entries(data)) {
        if (value !== undefined) {
            switch (key) {
                case "NULL":
                    return null;
                case "BOOL":
                    return Boolean(value);
                case "N":
                    return convertNumber(value, options);
                case "B":
                    return convertBinary(value);
                case "S":
                    return convertString(value);
                case "L":
                    return convertList(value, options);
                case "M":
                    return convertMap(value, options);
                case "NS":
                    return new Set(value.map((item) => convertNumber(item, options)));
                case "BS":
                    return new Set(value.map(convertBinary));
                case "SS":
                    return new Set(value.map(convertString));
                default:
                    throw new Error(`Unsupported type passed: ${key}`);
            }
        }
    }
    throw new Error(`No value defined: ${JSON.stringify(data)}`);
};
exports.convertToNative = convertToNative;
const convertNumber = (numString, options) => {
    if (options === null || options === void 0 ? void 0 : options.wrapNumbers) {
        return { value: numString };
    }
    const num = Number(numString);
    const infinityValues = [Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY];
    if ((num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) && !infinityValues.includes(num)) {
        if (typeof BigInt === "function") {
            try {
                return BigInt(numString);
            }
            catch (error) {
                throw new Error(`${numString} can't be converted to BigInt. Set options.wrapNumbers to get string value.`);
            }
        }
        else {
            throw new Error(`${numString} is outside SAFE_INTEGER bounds. Set options.wrapNumbers to get string value.`);
        }
    }
    return num;
};
// For future-proofing: Functions from scalar value as well as set value
const convertString = (stringValue) => stringValue;
const convertBinary = (binaryValue) => binaryValue;
const convertList = (list, options) => list.map((item) => (0, exports.convertToNative)(item, options));
const convertMap = (map, options) => Object.entries(map).reduce((acc, [key, value]) => ({
    ...acc,
    [key]: (0, exports.convertToNative)(value, options),
}), {});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFRvTmF0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NvbnZlcnRUb05hdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFLQTs7Ozs7R0FLRztBQUNJLE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBb0IsRUFBRSxPQUEyQixFQUF3QixFQUFFO0lBQ3pHLEtBQUssTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQy9DLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtZQUN2QixRQUFRLEdBQUcsRUFBRTtnQkFDWCxLQUFLLE1BQU07b0JBQ1QsT0FBTyxJQUFJLENBQUM7Z0JBQ2QsS0FBSyxNQUFNO29CQUNULE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUN4QixLQUFLLEdBQUc7b0JBQ04sT0FBTyxhQUFhLENBQUMsS0FBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNqRCxLQUFLLEdBQUc7b0JBQ04sT0FBTyxhQUFhLENBQUMsS0FBbUIsQ0FBQyxDQUFDO2dCQUM1QyxLQUFLLEdBQUc7b0JBQ04sT0FBTyxhQUFhLENBQUMsS0FBZSxDQUFDLENBQUM7Z0JBQ3hDLEtBQUssR0FBRztvQkFDTixPQUFPLFdBQVcsQ0FBQyxLQUF5QixFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN6RCxLQUFLLEdBQUc7b0JBQ04sT0FBTyxVQUFVLENBQUMsS0FBMEMsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDekUsS0FBSyxJQUFJO29CQUNQLE9BQU8sSUFBSSxHQUFHLENBQUUsS0FBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNsRixLQUFLLElBQUk7b0JBQ1AsT0FBTyxJQUFJLEdBQUcsQ0FBRSxLQUFzQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUM3RCxLQUFLLElBQUk7b0JBQ1AsT0FBTyxJQUFJLEdBQUcsQ0FBRSxLQUFrQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUN6RDtvQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixHQUFHLEVBQUUsQ0FBQyxDQUFDO2FBQ3REO1NBQ0Y7S0FDRjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQztBQTlCVyxRQUFBLGVBQWUsbUJBOEIxQjtBQUVGLE1BQU0sYUFBYSxHQUFHLENBQUMsU0FBaUIsRUFBRSxPQUEyQixFQUFpQyxFQUFFO0lBQ3RHLElBQUksT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFdBQVcsRUFBRTtRQUN4QixPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0tBQzdCO0lBRUQsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzlCLE1BQU0sY0FBYyxHQUFHLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVFLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDckcsSUFBSSxPQUFPLE1BQU0sS0FBSyxVQUFVLEVBQUU7WUFDaEMsSUFBSTtnQkFDRixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMxQjtZQUFDLE9BQU8sS0FBSyxFQUFFO2dCQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxTQUFTLDZFQUE2RSxDQUFDLENBQUM7YUFDNUc7U0FDRjthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLFNBQVMsK0VBQStFLENBQUMsQ0FBQztTQUM5RztLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDLENBQUM7QUFFRix3RUFBd0U7QUFDeEUsTUFBTSxhQUFhLEdBQUcsQ0FBQyxXQUFtQixFQUFVLEVBQUUsQ0FBQyxXQUFXLENBQUM7QUFDbkUsTUFBTSxhQUFhLEdBQUcsQ0FBQyxXQUF1QixFQUFjLEVBQUUsQ0FBQyxXQUFXLENBQUM7QUFFM0UsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFzQixFQUFFLE9BQTJCLEVBQTBCLEVBQUUsQ0FDbEcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBQSx1QkFBZSxFQUFDLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRXJELE1BQU0sVUFBVSxHQUFHLENBQ2pCLEdBQXNDLEVBQ3RDLE9BQTJCLEVBQ2MsRUFBRSxDQUMzQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDeEIsQ0FBQyxHQUE0QyxFQUFFLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBMkIsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RixHQUFHLEdBQUc7SUFDTixDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUEsdUJBQWUsRUFBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO0NBQ3ZDLENBQUMsRUFDRixFQUFFLENBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF0dHJpYnV0ZVZhbHVlIH0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuXG5pbXBvcnQgeyBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSwgTnVtYmVyVmFsdWUgfSBmcm9tIFwiLi9tb2RlbHNcIjtcbmltcG9ydCB7IHVubWFyc2hhbGxPcHRpb25zIH0gZnJvbSBcIi4vdW5tYXJzaGFsbFwiO1xuXG4vKipcbiAqIENvbnZlcnQgYSBEeW5hbW9EQiBBdHRyaWJ1dGVWYWx1ZSBvYmplY3QgdG8gaXRzIGVxdWl2YWxlbnQgSmF2YVNjcmlwdCB0eXBlLlxuICpcbiAqIEBwYXJhbSB7QXR0cmlidXRlVmFsdWV9IGRhdGEgLSBUaGUgRHluYW1vREIgcmVjb3JkIHRvIGNvbnZlcnQgdG8gSmF2YVNjcmlwdCB0eXBlLlxuICogQHBhcmFtIHt1bm1hcnNoYWxsT3B0aW9uc30gb3B0aW9ucyAtIEFuIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb24gb2JqZWN0IGZvciBgY29udmVydFRvTmF0aXZlYC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnZlcnRUb05hdGl2ZSA9IChkYXRhOiBBdHRyaWJ1dGVWYWx1ZSwgb3B0aW9ucz86IHVubWFyc2hhbGxPcHRpb25zKTogTmF0aXZlQXR0cmlidXRlVmFsdWUgPT4ge1xuICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlIFwiTlVMTFwiOlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBjYXNlIFwiQk9PTFwiOlxuICAgICAgICAgIHJldHVybiBCb29sZWFuKHZhbHVlKTtcbiAgICAgICAgY2FzZSBcIk5cIjpcbiAgICAgICAgICByZXR1cm4gY29udmVydE51bWJlcih2YWx1ZSBhcyBzdHJpbmcsIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiQlwiOlxuICAgICAgICAgIHJldHVybiBjb252ZXJ0QmluYXJ5KHZhbHVlIGFzIFVpbnQ4QXJyYXkpO1xuICAgICAgICBjYXNlIFwiU1wiOlxuICAgICAgICAgIHJldHVybiBjb252ZXJ0U3RyaW5nKHZhbHVlIGFzIHN0cmluZyk7XG4gICAgICAgIGNhc2UgXCJMXCI6XG4gICAgICAgICAgcmV0dXJuIGNvbnZlcnRMaXN0KHZhbHVlIGFzIEF0dHJpYnV0ZVZhbHVlW10sIG9wdGlvbnMpO1xuICAgICAgICBjYXNlIFwiTVwiOlxuICAgICAgICAgIHJldHVybiBjb252ZXJ0TWFwKHZhbHVlIGFzIHsgW2tleTogc3RyaW5nXTogQXR0cmlidXRlVmFsdWUgfSwgb3B0aW9ucyk7XG4gICAgICAgIGNhc2UgXCJOU1wiOlxuICAgICAgICAgIHJldHVybiBuZXcgU2V0KCh2YWx1ZSBhcyBzdHJpbmdbXSkubWFwKChpdGVtKSA9PiBjb252ZXJ0TnVtYmVyKGl0ZW0sIG9wdGlvbnMpKSk7XG4gICAgICAgIGNhc2UgXCJCU1wiOlxuICAgICAgICAgIHJldHVybiBuZXcgU2V0KCh2YWx1ZSBhcyBVaW50OEFycmF5W10pLm1hcChjb252ZXJ0QmluYXJ5KSk7XG4gICAgICAgIGNhc2UgXCJTU1wiOlxuICAgICAgICAgIHJldHVybiBuZXcgU2V0KCh2YWx1ZSBhcyBzdHJpbmdbXSkubWFwKGNvbnZlcnRTdHJpbmcpKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIHR5cGUgcGFzc2VkOiAke2tleX1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBObyB2YWx1ZSBkZWZpbmVkOiAke0pTT04uc3RyaW5naWZ5KGRhdGEpfWApO1xufTtcblxuY29uc3QgY29udmVydE51bWJlciA9IChudW1TdHJpbmc6IHN0cmluZywgb3B0aW9ucz86IHVubWFyc2hhbGxPcHRpb25zKTogbnVtYmVyIHwgYmlnaW50IHwgTnVtYmVyVmFsdWUgPT4ge1xuICBpZiAob3B0aW9ucz8ud3JhcE51bWJlcnMpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogbnVtU3RyaW5nIH07XG4gIH1cblxuICBjb25zdCBudW0gPSBOdW1iZXIobnVtU3RyaW5nKTtcbiAgY29uc3QgaW5maW5pdHlWYWx1ZXMgPSBbTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFldO1xuICBpZiAoKG51bSA+IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSIHx8IG51bSA8IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSKSAmJiAhaW5maW5pdHlWYWx1ZXMuaW5jbHVkZXMobnVtKSkge1xuICAgIGlmICh0eXBlb2YgQmlnSW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBCaWdJbnQobnVtU3RyaW5nKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1TdHJpbmd9IGNhbid0IGJlIGNvbnZlcnRlZCB0byBCaWdJbnQuIFNldCBvcHRpb25zLndyYXBOdW1iZXJzIHRvIGdldCBzdHJpbmcgdmFsdWUuYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtudW1TdHJpbmd9IGlzIG91dHNpZGUgU0FGRV9JTlRFR0VSIGJvdW5kcy4gU2V0IG9wdGlvbnMud3JhcE51bWJlcnMgdG8gZ2V0IHN0cmluZyB2YWx1ZS5gKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bTtcbn07XG5cbi8vIEZvciBmdXR1cmUtcHJvb2Zpbmc6IEZ1bmN0aW9ucyBmcm9tIHNjYWxhciB2YWx1ZSBhcyB3ZWxsIGFzIHNldCB2YWx1ZVxuY29uc3QgY29udmVydFN0cmluZyA9IChzdHJpbmdWYWx1ZTogc3RyaW5nKTogc3RyaW5nID0+IHN0cmluZ1ZhbHVlO1xuY29uc3QgY29udmVydEJpbmFyeSA9IChiaW5hcnlWYWx1ZTogVWludDhBcnJheSk6IFVpbnQ4QXJyYXkgPT4gYmluYXJ5VmFsdWU7XG5cbmNvbnN0IGNvbnZlcnRMaXN0ID0gKGxpc3Q6IEF0dHJpYnV0ZVZhbHVlW10sIG9wdGlvbnM/OiB1bm1hcnNoYWxsT3B0aW9ucyk6IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlW10gPT5cbiAgbGlzdC5tYXAoKGl0ZW0pID0+IGNvbnZlcnRUb05hdGl2ZShpdGVtLCBvcHRpb25zKSk7XG5cbmNvbnN0IGNvbnZlcnRNYXAgPSAoXG4gIG1hcDogeyBba2V5OiBzdHJpbmddOiBBdHRyaWJ1dGVWYWx1ZSB9LFxuICBvcHRpb25zPzogdW5tYXJzaGFsbE9wdGlvbnNcbik6IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfSA9PlxuICBPYmplY3QuZW50cmllcyhtYXApLnJlZHVjZShcbiAgICAoYWNjOiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0sIFtrZXksIHZhbHVlXTogW3N0cmluZywgQXR0cmlidXRlVmFsdWVdKSA9PiAoe1xuICAgICAgLi4uYWNjLFxuICAgICAgW2tleV06IGNvbnZlcnRUb05hdGl2ZSh2YWx1ZSwgb3B0aW9ucyksXG4gICAgfSksXG4gICAge31cbiAgKTtcbiJdfQ==