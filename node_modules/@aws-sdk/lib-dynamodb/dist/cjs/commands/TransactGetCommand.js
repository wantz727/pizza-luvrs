"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactGetCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * TransactGetItemsCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class TransactGetCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "TransactItems", children: [{ key: "Get", children: [{ key: "Key" }] }] }];
        this.outputKeyNodes = [{ key: "Responses", children: [{ key: "Item" }] }];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.TransactGetItemsCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.TransactGetCommand = TransactGetCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNhY3RHZXRDb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL1RyYW5zYWN0R2V0Q29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2Q0FBb0U7QUFDcEUsOERBT2tDO0FBQ2xDLDBEQUE2RDtBQXNCN0Q7Ozs7OztHQU1HO0FBQ0gsTUFBYSxrQkFBbUIsU0FBUSx1QkFJdkM7SUFJQyxZQUFxQixLQUE4QjtRQUNqRCxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQXlCO1FBSGxDLGtCQUFhLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNuRyxtQkFBYyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBSXRGLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUNmLFdBQW1FLEVBQ25FLGFBQW1ELEVBQ25ELE9BQThCO1FBRTlCLE1BQU0sRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxhQUFhLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUNuRixNQUFNLE9BQU8sR0FBRyxJQUFJLHlDQUF5QixDQUFDLElBQUEscUJBQWEsRUFBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUM5RyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvRSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLE9BQU87Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLE1BQU0sRUFBRSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQzthQUM5RSxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaENELGdEQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZywgU2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcyB9IGZyb20gXCIuLi9EeW5hbW9EQkRvY3VtZW50Q2xpZW50XCI7XG5pbXBvcnQgeyBtYXJzaGFsbElucHV0LCB1bm1hcnNoYWxsT3V0cHV0IH0gZnJvbSBcIi4uL2NvbW1hbmRzL3V0aWxzXCI7XG5pbXBvcnQge1xuICBHZXQsXG4gIEl0ZW1SZXNwb25zZSxcbiAgVHJhbnNhY3RHZXRJdGVtLFxuICBUcmFuc2FjdEdldEl0ZW1zQ29tbWFuZCBhcyBfX1RyYW5zYWN0R2V0SXRlbXNDb21tYW5kLFxuICBUcmFuc2FjdEdldEl0ZW1zQ29tbWFuZElucHV0IGFzIF9fVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmRJbnB1dCxcbiAgVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmRPdXRwdXQgYXMgX19UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZE91dHB1dCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBIYW5kbGVyLCBNaWRkbGV3YXJlU3RhY2ssIEh0dHBIYW5kbGVyT3B0aW9ucyBhcyBfX0h0dHBIYW5kbGVyT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTmF0aXZlQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1keW5hbW9kYlwiO1xuXG5leHBvcnQgdHlwZSBUcmFuc2FjdEdldENvbW1hbmRJbnB1dCA9IE9taXQ8X19UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZElucHV0LCBcIlRyYW5zYWN0SXRlbXNcIj4gJiB7XG4gIFRyYW5zYWN0SXRlbXM6XG4gICAgfCAoT21pdDxUcmFuc2FjdEdldEl0ZW0sIFwiR2V0XCI+ICYge1xuICAgICAgICBHZXQ6XG4gICAgICAgICAgfCAoT21pdDxHZXQsIFwiS2V5XCI+ICYge1xuICAgICAgICAgICAgICBLZXk6IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfSB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfCB1bmRlZmluZWQ7XG4gICAgICB9KVtdXG4gICAgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgdHlwZSBUcmFuc2FjdEdldENvbW1hbmRPdXRwdXQgPSBPbWl0PF9fVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmRPdXRwdXQsIFwiUmVzcG9uc2VzXCI+ICYge1xuICBSZXNwb25zZXM/OiAoT21pdDxJdGVtUmVzcG9uc2UsIFwiSXRlbVwiPiAmIHtcbiAgICBJdGVtPzogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9O1xuICB9KVtdO1xufTtcblxuLyoqXG4gKiBBY2NlcHRzIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVzIGluc3RlYWQgb2YgYEF0dHJpYnV0ZVZhbHVlYHMsIGFuZCBjYWxsc1xuICogVHJhbnNhY3RHZXRJdGVtc0NvbW1hbmQgb3BlcmF0aW9uIGZyb20ge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYiBAYXdzLXNkay9jbGllbnQtZHluYW1vZGJ9LlxuICpcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBwYXNzZWQgaW4gYXMgcGFyYW1ldGVycyBhcmUgbWFyc2hhbGxlZCBpbnRvIGBBdHRyaWJ1dGVWYWx1ZWAgc2hhcGVzXG4gKiByZXF1aXJlZCBieSBBbWF6b24gRHluYW1vREIuIFJlc3BvbnNlcyBmcm9tIER5bmFtb0RCIGFyZSB1bm1hcnNoYWxsZWQgaW50byBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdEdldENvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZDxcbiAgVHJhbnNhY3RHZXRDb21tYW5kSW5wdXQsXG4gIFRyYW5zYWN0R2V0Q29tbWFuZE91dHB1dCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnXG4+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEtleU5vZGVzID0gW3sga2V5OiBcIlRyYW5zYWN0SXRlbXNcIiwgY2hpbGRyZW46IFt7IGtleTogXCJHZXRcIiwgY2hpbGRyZW46IFt7IGtleTogXCJLZXlcIiB9XSB9XSB9XTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFt7IGtleTogXCJSZXNwb25zZXNcIiwgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtXCIgfV0gfV07XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaW5wdXQ6IFRyYW5zYWN0R2V0Q29tbWFuZElucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKFxuICAgIGNsaWVudFN0YWNrOiBNaWRkbGV3YXJlU3RhY2s8U2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcz4sXG4gICAgY29uZmlndXJhdGlvbjogRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLFxuICAgIG9wdGlvbnM/OiBfX0h0dHBIYW5kbGVyT3B0aW9uc1xuICApOiBIYW5kbGVyPFRyYW5zYWN0R2V0Q29tbWFuZElucHV0LCBUcmFuc2FjdEdldENvbW1hbmRPdXRwdXQ+IHtcbiAgICBjb25zdCB7IG1hcnNoYWxsT3B0aW9ucywgdW5tYXJzaGFsbE9wdGlvbnMgfSA9IGNvbmZpZ3VyYXRpb24udHJhbnNsYXRlQ29uZmlnIHx8IHt9O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgX19UcmFuc2FjdEdldEl0ZW1zQ29tbWFuZChtYXJzaGFsbElucHV0KHRoaXMuaW5wdXQsIHRoaXMuaW5wdXRLZXlOb2RlcywgbWFyc2hhbGxPcHRpb25zKSk7XG4gICAgY29uc3QgaGFuZGxlciA9IGNvbW1hbmQucmVzb2x2ZU1pZGRsZXdhcmUoY2xpZW50U3RhY2ssIGNvbmZpZ3VyYXRpb24sIG9wdGlvbnMpO1xuXG4gICAgcmV0dXJuIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCBoYW5kbGVyKGNvbW1hbmQpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgb3V0cHV0OiB1bm1hcnNoYWxsT3V0cHV0KGRhdGEub3V0cHV0LCB0aGlzLm91dHB1dEtleU5vZGVzLCB1bm1hcnNoYWxsT3B0aW9ucyksXG4gICAgICB9O1xuICAgIH07XG4gIH1cbn1cbiJdfQ==