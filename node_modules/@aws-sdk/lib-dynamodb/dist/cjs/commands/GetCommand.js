"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * GetItemCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class GetCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Key" }];
        this.outputKeyNodes = [{ key: "Item" }];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.GetItemCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.GetCommand = GetCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0Q29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9HZXRDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUFvRTtBQUNwRSw4REFJa0M7QUFDbEMsMERBQTZEO0FBWTdEOzs7Ozs7R0FNRztBQUNILE1BQWEsVUFBVyxTQUFRLHVCQUFpRjtJQUkvRyxZQUFxQixLQUFzQjtRQUN6QyxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQWlCO1FBSDFCLGtCQUFhLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLG1CQUFjLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBSXBELENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUNmLFdBQW1FLEVBQ25FLGFBQW1ELEVBQ25ELE9BQThCO1FBRTlCLE1BQU0sRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxhQUFhLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUNuRixNQUFNLE9BQU8sR0FBRyxJQUFJLGdDQUFnQixDQUFDLElBQUEscUJBQWEsRUFBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNyRyxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvRSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLE9BQU87Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLE1BQU0sRUFBRSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQzthQUM5RSxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBNUJELGdDQTRCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZywgU2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcyB9IGZyb20gXCIuLi9EeW5hbW9EQkRvY3VtZW50Q2xpZW50XCI7XG5pbXBvcnQgeyBtYXJzaGFsbElucHV0LCB1bm1hcnNoYWxsT3V0cHV0IH0gZnJvbSBcIi4uL2NvbW1hbmRzL3V0aWxzXCI7XG5pbXBvcnQge1xuICBHZXRJdGVtQ29tbWFuZCBhcyBfX0dldEl0ZW1Db21tYW5kLFxuICBHZXRJdGVtQ29tbWFuZElucHV0IGFzIF9fR2V0SXRlbUNvbW1hbmRJbnB1dCxcbiAgR2V0SXRlbUNvbW1hbmRPdXRwdXQgYXMgX19HZXRJdGVtQ29tbWFuZE91dHB1dCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBIYW5kbGVyLCBNaWRkbGV3YXJlU3RhY2ssIEh0dHBIYW5kbGVyT3B0aW9ucyBhcyBfX0h0dHBIYW5kbGVyT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTmF0aXZlQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1keW5hbW9kYlwiO1xuXG5leHBvcnQgdHlwZSBHZXRDb21tYW5kSW5wdXQgPSBPbWl0PF9fR2V0SXRlbUNvbW1hbmRJbnB1dCwgXCJLZXlcIj4gJiB7XG4gIEtleTogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IHR5cGUgR2V0Q29tbWFuZE91dHB1dCA9IE9taXQ8X19HZXRJdGVtQ29tbWFuZE91dHB1dCwgXCJJdGVtXCI+ICYge1xuICBJdGVtPzogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9O1xufTtcblxuLyoqXG4gKiBBY2NlcHRzIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVzIGluc3RlYWQgb2YgYEF0dHJpYnV0ZVZhbHVlYHMsIGFuZCBjYWxsc1xuICogR2V0SXRlbUNvbW1hbmQgb3BlcmF0aW9uIGZyb20ge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYiBAYXdzLXNkay9jbGllbnQtZHluYW1vZGJ9LlxuICpcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBwYXNzZWQgaW4gYXMgcGFyYW1ldGVycyBhcmUgbWFyc2hhbGxlZCBpbnRvIGBBdHRyaWJ1dGVWYWx1ZWAgc2hhcGVzXG4gKiByZXF1aXJlZCBieSBBbWF6b24gRHluYW1vREIuIFJlc3BvbnNlcyBmcm9tIER5bmFtb0RCIGFyZSB1bm1hcnNoYWxsZWQgaW50byBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZXRDb21tYW5kIGV4dGVuZHMgJENvbW1hbmQ8R2V0Q29tbWFuZElucHV0LCBHZXRDb21tYW5kT3V0cHV0LCBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWc+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEtleU5vZGVzID0gW3sga2V5OiBcIktleVwiIH1dO1xuICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dEtleU5vZGVzID0gW3sga2V5OiBcIkl0ZW1cIiB9XTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbnB1dDogR2V0Q29tbWFuZElucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKFxuICAgIGNsaWVudFN0YWNrOiBNaWRkbGV3YXJlU3RhY2s8U2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcz4sXG4gICAgY29uZmlndXJhdGlvbjogRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLFxuICAgIG9wdGlvbnM/OiBfX0h0dHBIYW5kbGVyT3B0aW9uc1xuICApOiBIYW5kbGVyPEdldENvbW1hbmRJbnB1dCwgR2V0Q29tbWFuZE91dHB1dD4ge1xuICAgIGNvbnN0IHsgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9ucyB9ID0gY29uZmlndXJhdGlvbi50cmFuc2xhdGVDb25maWcgfHwge307XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBfX0dldEl0ZW1Db21tYW5kKG1hcnNoYWxsSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGhhbmRsZXIoY29tbWFuZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBvdXRwdXQ6IHVubWFyc2hhbGxPdXRwdXQoZGF0YS5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuIl19