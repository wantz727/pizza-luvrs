"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScanCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * ScanCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class ScanCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            {
                key: "ScanFilter",
                children: {
                    children: [{ key: "AttributeValueList" }],
                },
            },
            { key: "ExclusiveStartKey" },
            { key: "ExpressionAttributeValues" },
        ];
        this.outputKeyNodes = [{ key: "Items" }, { key: "LastEvaluatedKey" }];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.ScanCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.ScanCommand = ScanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NhbkNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvU2NhbkNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQW9FO0FBQ3BFLDhEQUtrQztBQUNsQywwREFBNkQ7QUF3QjdEOzs7Ozs7R0FNRztBQUNILE1BQWEsV0FBWSxTQUFRLHVCQUFtRjtJQWFsSCxZQUFxQixLQUF1QjtRQUMxQyxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQWtCO1FBWjNCLGtCQUFhLEdBQUc7WUFDL0I7Z0JBQ0UsR0FBRyxFQUFFLFlBQVk7Z0JBQ2pCLFFBQVEsRUFBRTtvQkFDUixRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxvQkFBb0IsRUFBRSxDQUFDO2lCQUMxQzthQUNGO1lBQ0QsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUU7WUFDNUIsRUFBRSxHQUFHLEVBQUUsMkJBQTJCLEVBQUU7U0FDckMsQ0FBQztRQUNlLG1CQUFjLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLENBQUM7SUFJbEYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCLENBQ2YsV0FBbUUsRUFDbkUsYUFBbUQsRUFDbkQsT0FBOEI7UUFFOUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLGFBQWEsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQ25GLE1BQU0sT0FBTyxHQUFHLElBQUksNkJBQWEsQ0FBQyxJQUFBLHFCQUFhLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDbEcsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0UsT0FBTyxLQUFLLElBQUksRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxPQUFPO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxNQUFNLEVBQUUsSUFBQSx3QkFBZ0IsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUM7YUFDOUUsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXJDRCxrQ0FxQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsIFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXMgfSBmcm9tIFwiLi4vRHluYW1vREJEb2N1bWVudENsaWVudFwiO1xuaW1wb3J0IHsgbWFyc2hhbGxJbnB1dCwgdW5tYXJzaGFsbE91dHB1dCB9IGZyb20gXCIuLi9jb21tYW5kcy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgQ29uZGl0aW9uLFxuICBTY2FuQ29tbWFuZCBhcyBfX1NjYW5Db21tYW5kLFxuICBTY2FuQ29tbWFuZElucHV0IGFzIF9fU2NhbkNvbW1hbmRJbnB1dCxcbiAgU2NhbkNvbW1hbmRPdXRwdXQgYXMgX19TY2FuQ29tbWFuZE91dHB1dCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBIYW5kbGVyLCBNaWRkbGV3YXJlU3RhY2ssIEh0dHBIYW5kbGVyT3B0aW9ucyBhcyBfX0h0dHBIYW5kbGVyT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTmF0aXZlQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1keW5hbW9kYlwiO1xuXG5leHBvcnQgdHlwZSBTY2FuQ29tbWFuZElucHV0ID0gT21pdDxcbiAgX19TY2FuQ29tbWFuZElucHV0LFxuICBcIlNjYW5GaWx0ZXJcIiB8IFwiRXhjbHVzaXZlU3RhcnRLZXlcIiB8IFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiXG4+ICYge1xuICBTY2FuRmlsdGVyPzoge1xuICAgIFtrZXk6IHN0cmluZ106IE9taXQ8Q29uZGl0aW9uLCBcIkF0dHJpYnV0ZVZhbHVlTGlzdFwiPiAmIHtcbiAgICAgIEF0dHJpYnV0ZVZhbHVlTGlzdD86IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlW107XG4gICAgfTtcbiAgfTtcbiAgRXhjbHVzaXZlU3RhcnRLZXk/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG4gIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG59O1xuXG5leHBvcnQgdHlwZSBTY2FuQ29tbWFuZE91dHB1dCA9IE9taXQ8X19TY2FuQ29tbWFuZE91dHB1dCwgXCJJdGVtc1wiIHwgXCJMYXN0RXZhbHVhdGVkS2V5XCI+ICYge1xuICBJdGVtcz86IHtcbiAgICBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZTtcbiAgfVtdO1xuICBMYXN0RXZhbHVhdGVkS2V5PzogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9O1xufTtcblxuLyoqXG4gKiBBY2NlcHRzIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVzIGluc3RlYWQgb2YgYEF0dHJpYnV0ZVZhbHVlYHMsIGFuZCBjYWxsc1xuICogU2NhbkNvbW1hbmQgb3BlcmF0aW9uIGZyb20ge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYiBAYXdzLXNkay9jbGllbnQtZHluYW1vZGJ9LlxuICpcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBwYXNzZWQgaW4gYXMgcGFyYW1ldGVycyBhcmUgbWFyc2hhbGxlZCBpbnRvIGBBdHRyaWJ1dGVWYWx1ZWAgc2hhcGVzXG4gKiByZXF1aXJlZCBieSBBbWF6b24gRHluYW1vREIuIFJlc3BvbnNlcyBmcm9tIER5bmFtb0RCIGFyZSB1bm1hcnNoYWxsZWQgaW50byBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2FuQ29tbWFuZCBleHRlbmRzICRDb21tYW5kPFNjYW5Db21tYW5kSW5wdXQsIFNjYW5Db21tYW5kT3V0cHV0LCBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWc+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEtleU5vZGVzID0gW1xuICAgIHtcbiAgICAgIGtleTogXCJTY2FuRmlsdGVyXCIsXG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBjaGlsZHJlbjogW3sga2V5OiBcIkF0dHJpYnV0ZVZhbHVlTGlzdFwiIH1dLFxuICAgICAgfSxcbiAgICB9LFxuICAgIHsga2V5OiBcIkV4Y2x1c2l2ZVN0YXJ0S2V5XCIgfSxcbiAgICB7IGtleTogXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCIgfSxcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFt7IGtleTogXCJJdGVtc1wiIH0sIHsga2V5OiBcIkxhc3RFdmFsdWF0ZWRLZXlcIiB9XTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbnB1dDogU2NhbkNvbW1hbmRJbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShcbiAgICBjbGllbnRTdGFjazogTWlkZGxld2FyZVN0YWNrPFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXM+LFxuICAgIGNvbmZpZ3VyYXRpb246IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZyxcbiAgICBvcHRpb25zPzogX19IdHRwSGFuZGxlck9wdGlvbnNcbiAgKTogSGFuZGxlcjxTY2FuQ29tbWFuZElucHV0LCBTY2FuQ29tbWFuZE91dHB1dD4ge1xuICAgIGNvbnN0IHsgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9ucyB9ID0gY29uZmlndXJhdGlvbi50cmFuc2xhdGVDb25maWcgfHwge307XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBfX1NjYW5Db21tYW5kKG1hcnNoYWxsSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGhhbmRsZXIoY29tbWFuZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBvdXRwdXQ6IHVubWFyc2hhbGxPdXRwdXQoZGF0YS5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuIl19