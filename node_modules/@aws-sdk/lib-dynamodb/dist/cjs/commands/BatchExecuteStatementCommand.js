"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchExecuteStatementCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * BatchExecuteStatementCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class BatchExecuteStatementCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [{ key: "Statements", children: [{ key: "Parameters" }] }];
        this.outputKeyNodes = [{ key: "Responses", children: [{ key: "Item" }] }];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.BatchExecuteStatementCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.BatchExecuteStatementCommand = BatchExecuteStatementCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZDQUFvRTtBQUNwRSw4REFNa0M7QUFDbEMsMERBQTZEO0FBa0I3RDs7Ozs7O0dBTUc7QUFDSCxNQUFhLDRCQUE2QixTQUFRLHVCQUlqRDtJQUlDLFlBQXFCLEtBQXdDO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBbUM7UUFINUMsa0JBQWEsR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUMzRSxtQkFBYyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBSXRGLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUNmLFdBQW1FLEVBQ25FLGFBQW1ELEVBQ25ELE9BQThCO1FBRTlCLE1BQU0sRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxhQUFhLENBQUMsZUFBZSxJQUFJLEVBQUUsQ0FBQztRQUNuRixNQUFNLE9BQU8sR0FBRyxJQUFJLDhDQUE4QixDQUFDLElBQUEscUJBQWEsRUFBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztRQUNuSCxNQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUUvRSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3BDLE9BQU87Z0JBQ0wsR0FBRyxJQUFJO2dCQUNQLE1BQU0sRUFBRSxJQUFBLHdCQUFnQixFQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxpQkFBaUIsQ0FBQzthQUM5RSxDQUFDO1FBQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBaENELG9FQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZywgU2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcyB9IGZyb20gXCIuLi9EeW5hbW9EQkRvY3VtZW50Q2xpZW50XCI7XG5pbXBvcnQgeyBtYXJzaGFsbElucHV0LCB1bm1hcnNoYWxsT3V0cHV0IH0gZnJvbSBcIi4uL2NvbW1hbmRzL3V0aWxzXCI7XG5pbXBvcnQge1xuICBCYXRjaFN0YXRlbWVudFJlcXVlc3QsXG4gIEJhdGNoU3RhdGVtZW50UmVzcG9uc2UsXG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgYXMgX19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kLFxuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kSW5wdXQgYXMgX19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kSW5wdXQsXG4gIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRPdXRwdXQgYXMgX19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kT3V0cHV0LFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEhhbmRsZXIsIE1pZGRsZXdhcmVTdGFjaywgSHR0cEhhbmRsZXJPcHRpb25zIGFzIF9fSHR0cEhhbmRsZXJPcHRpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IGZyb20gXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCI7XG5cbmV4cG9ydCB0eXBlIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCA9IE9taXQ8X19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kSW5wdXQsIFwiU3RhdGVtZW50c1wiPiAmIHtcbiAgU3RhdGVtZW50czpcbiAgICB8IChPbWl0PEJhdGNoU3RhdGVtZW50UmVxdWVzdCwgXCJQYXJhbWV0ZXJzXCI+ICYge1xuICAgICAgICBQYXJhbWV0ZXJzPzogTmF0aXZlQXR0cmlidXRlVmFsdWVbXTtcbiAgICAgIH0pW11cbiAgICB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRPdXRwdXQgPSBPbWl0PF9fQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZE91dHB1dCwgXCJSZXNwb25zZXNcIj4gJiB7XG4gIFJlc3BvbnNlcz86IChPbWl0PEJhdGNoU3RhdGVtZW50UmVzcG9uc2UsIFwiSXRlbVwiPiAmIHtcbiAgICBJdGVtPzogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9O1xuICB9KVtdO1xufTtcblxuLyoqXG4gKiBBY2NlcHRzIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVzIGluc3RlYWQgb2YgYEF0dHJpYnV0ZVZhbHVlYHMsIGFuZCBjYWxsc1xuICogQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZCBvcGVyYXRpb24gZnJvbSB7QGxpbmsgaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiIEBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYn0uXG4gKlxuICogSmF2YVNjcmlwdCBvYmplY3RzIHBhc3NlZCBpbiBhcyBwYXJhbWV0ZXJzIGFyZSBtYXJzaGFsbGVkIGludG8gYEF0dHJpYnV0ZVZhbHVlYCBzaGFwZXNcbiAqIHJlcXVpcmVkIGJ5IEFtYXpvbiBEeW5hbW9EQi4gUmVzcG9uc2VzIGZyb20gRHluYW1vREIgYXJlIHVubWFyc2hhbGxlZCBpbnRvIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZDxcbiAgQmF0Y2hFeGVjdXRlU3RhdGVtZW50Q29tbWFuZElucHV0LFxuICBCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kT3V0cHV0LFxuICBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWdcbj4ge1xuICBwcml2YXRlIHJlYWRvbmx5IGlucHV0S2V5Tm9kZXMgPSBbeyBrZXk6IFwiU3RhdGVtZW50c1wiLCBjaGlsZHJlbjogW3sga2V5OiBcIlBhcmFtZXRlcnNcIiB9XSB9XTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFt7IGtleTogXCJSZXNwb25zZXNcIiwgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtXCIgfV0gfV07XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaW5wdXQ6IEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRJbnB1dCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICByZXNvbHZlTWlkZGxld2FyZShcbiAgICBjbGllbnRTdGFjazogTWlkZGxld2FyZVN0YWNrPFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXM+LFxuICAgIGNvbmZpZ3VyYXRpb246IER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZyxcbiAgICBvcHRpb25zPzogX19IdHRwSGFuZGxlck9wdGlvbnNcbiAgKTogSGFuZGxlcjxCYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kSW5wdXQsIEJhdGNoRXhlY3V0ZVN0YXRlbWVudENvbW1hbmRPdXRwdXQ+IHtcbiAgICBjb25zdCB7IG1hcnNoYWxsT3B0aW9ucywgdW5tYXJzaGFsbE9wdGlvbnMgfSA9IGNvbmZpZ3VyYXRpb24udHJhbnNsYXRlQ29uZmlnIHx8IHt9O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgX19CYXRjaEV4ZWN1dGVTdGF0ZW1lbnRDb21tYW5kKG1hcnNoYWxsSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGhhbmRsZXIoY29tbWFuZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBvdXRwdXQ6IHVubWFyc2hhbGxPdXRwdXQoZGF0YS5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuIl19