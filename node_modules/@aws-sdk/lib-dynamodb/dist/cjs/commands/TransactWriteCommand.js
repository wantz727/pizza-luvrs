"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactWriteCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * TransactWriteItemsCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class TransactWriteCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            {
                key: "TransactItems",
                children: [
                    { key: "ConditionCheck", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Put", children: [{ key: "Item" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Delete", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                    { key: "Update", children: [{ key: "Key" }, { key: "ExpressionAttributeValues" }] },
                ],
            },
        ];
        this.outputKeyNodes = [
            {
                key: "ItemCollectionMetrics",
                children: {
                    children: [{ key: "ItemCollectionKey" }],
                },
            },
        ];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.TransactWriteItemsCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.TransactWriteCommand = TransactWriteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNhY3RXcml0ZUNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvVHJhbnNhY3RXcml0ZUNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQW9FO0FBQ3BFLDhEQVVrQztBQUNsQywwREFBNkQ7QUFtQzdEOzs7Ozs7R0FNRztBQUNILE1BQWEsb0JBQXFCLFNBQVEsdUJBSXpDO0lBcUJDLFlBQXFCLEtBQWdDO1FBQ25ELEtBQUssRUFBRSxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBMkI7UUFwQnBDLGtCQUFhLEdBQUc7WUFDL0I7Z0JBQ0UsR0FBRyxFQUFFLGVBQWU7Z0JBQ3BCLFFBQVEsRUFBRTtvQkFDUixFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUU7b0JBQzNGLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUU7b0JBQ2pGLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUU7b0JBQ25GLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxDQUFDLEVBQUU7aUJBQ3BGO2FBQ0Y7U0FDRixDQUFDO1FBQ2UsbUJBQWMsR0FBRztZQUNoQztnQkFDRSxHQUFHLEVBQUUsdUJBQXVCO2dCQUM1QixRQUFRLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztpQkFDekM7YUFDRjtTQUNGLENBQUM7SUFJRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FDZixXQUFtRSxFQUNuRSxhQUFtRCxFQUNuRCxPQUE4QjtRQUU5QixNQUFNLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsYUFBYSxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDbkYsTUFBTSxPQUFPLEdBQUcsSUFBSSwyQ0FBMkIsQ0FBQyxJQUFBLHFCQUFhLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDaEgsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0UsT0FBTyxLQUFLLElBQUksRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxPQUFPO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxNQUFNLEVBQUUsSUFBQSx3QkFBZ0IsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUM7YUFDOUUsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWpERCxvREFpREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsIFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXMgfSBmcm9tIFwiLi4vRHluYW1vREJEb2N1bWVudENsaWVudFwiO1xuaW1wb3J0IHsgbWFyc2hhbGxJbnB1dCwgdW5tYXJzaGFsbE91dHB1dCB9IGZyb20gXCIuLi9jb21tYW5kcy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgQ29uZGl0aW9uQ2hlY2ssXG4gIERlbGV0ZSxcbiAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzLFxuICBQdXQsXG4gIFRyYW5zYWN0V3JpdGVJdGVtLFxuICBVcGRhdGUsXG4gIFRyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmQgYXMgX19UcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kLFxuICBUcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kSW5wdXQgYXMgX19UcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kSW5wdXQsXG4gIFRyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmRPdXRwdXQgYXMgX19UcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kT3V0cHV0LFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEhhbmRsZXIsIE1pZGRsZXdhcmVTdGFjaywgSHR0cEhhbmRsZXJPcHRpb25zIGFzIF9fSHR0cEhhbmRsZXJPcHRpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IGZyb20gXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCI7XG5cbmV4cG9ydCB0eXBlIFRyYW5zYWN0V3JpdGVDb21tYW5kSW5wdXQgPSBPbWl0PF9fVHJhbnNhY3RXcml0ZUl0ZW1zQ29tbWFuZElucHV0LCBcIlRyYW5zYWN0SXRlbXNcIj4gJiB7XG4gIFRyYW5zYWN0SXRlbXM6XG4gICAgfCAoT21pdDxUcmFuc2FjdFdyaXRlSXRlbSwgXCJDb25kaXRpb25DaGVja1wiIHwgXCJQdXRcIiB8IFwiRGVsZXRlXCIgfCBcIlVwZGF0ZVwiPiAmIHtcbiAgICAgICAgQ29uZGl0aW9uQ2hlY2s/OiBPbWl0PENvbmRpdGlvbkNoZWNrLCBcIktleVwiIHwgXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCI+ICYge1xuICAgICAgICAgIEtleTogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IHwgdW5kZWZpbmVkO1xuICAgICAgICAgIEV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXM/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG4gICAgICAgIH07XG4gICAgICAgIFB1dD86IE9taXQ8UHV0LCBcIkl0ZW1cIiB8IFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiPiAmIHtcbiAgICAgICAgICBJdGVtOiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gfCB1bmRlZmluZWQ7XG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcz86IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfTtcbiAgICAgICAgfTtcbiAgICAgICAgRGVsZXRlPzogT21pdDxEZWxldGUsIFwiS2V5XCIgfCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIj4gJiB7XG4gICAgICAgICAgS2V5OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gfCB1bmRlZmluZWQ7XG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcz86IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfTtcbiAgICAgICAgfTtcbiAgICAgICAgVXBkYXRlPzogT21pdDxVcGRhdGUsIFwiS2V5XCIgfCBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIj4gJiB7XG4gICAgICAgICAgS2V5OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gfCB1bmRlZmluZWQ7XG4gICAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlcz86IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfTtcbiAgICAgICAgfTtcbiAgICAgIH0pW11cbiAgICB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIFRyYW5zYWN0V3JpdGVDb21tYW5kT3V0cHV0ID0gT21pdDxfX1RyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmRPdXRwdXQsIFwiSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCI+ICYge1xuICBJdGVtQ29sbGVjdGlvbk1ldHJpY3M/OiB7XG4gICAgW2tleTogc3RyaW5nXTogKE9taXQ8SXRlbUNvbGxlY3Rpb25NZXRyaWNzLCBcIkl0ZW1Db2xsZWN0aW9uS2V5XCI+ICYge1xuICAgICAgSXRlbUNvbGxlY3Rpb25LZXk/OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH07XG4gICAgfSlbXTtcbiAgfTtcbn07XG5cbi8qKlxuICogQWNjZXB0cyBuYXRpdmUgSmF2YVNjcmlwdCB0eXBlcyBpbnN0ZWFkIG9mIGBBdHRyaWJ1dGVWYWx1ZWBzLCBhbmQgY2FsbHNcbiAqIFRyYW5zYWN0V3JpdGVJdGVtc0NvbW1hbmQgb3BlcmF0aW9uIGZyb20ge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYiBAYXdzLXNkay9jbGllbnQtZHluYW1vZGJ9LlxuICpcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBwYXNzZWQgaW4gYXMgcGFyYW1ldGVycyBhcmUgbWFyc2hhbGxlZCBpbnRvIGBBdHRyaWJ1dGVWYWx1ZWAgc2hhcGVzXG4gKiByZXF1aXJlZCBieSBBbWF6b24gRHluYW1vREIuIFJlc3BvbnNlcyBmcm9tIER5bmFtb0RCIGFyZSB1bm1hcnNoYWxsZWQgaW50byBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUcmFuc2FjdFdyaXRlQ29tbWFuZCBleHRlbmRzICRDb21tYW5kPFxuICBUcmFuc2FjdFdyaXRlQ29tbWFuZElucHV0LFxuICBUcmFuc2FjdFdyaXRlQ29tbWFuZE91dHB1dCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnXG4+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEtleU5vZGVzID0gW1xuICAgIHtcbiAgICAgIGtleTogXCJUcmFuc2FjdEl0ZW1zXCIsXG4gICAgICBjaGlsZHJlbjogW1xuICAgICAgICB7IGtleTogXCJDb25kaXRpb25DaGVja1wiLCBjaGlsZHJlbjogW3sga2V5OiBcIktleVwiIH0sIHsga2V5OiBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiB9XSB9LFxuICAgICAgICB7IGtleTogXCJQdXRcIiwgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtXCIgfSwgeyBrZXk6IFwiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiIH1dIH0sXG4gICAgICAgIHsga2V5OiBcIkRlbGV0ZVwiLCBjaGlsZHJlbjogW3sga2V5OiBcIktleVwiIH0sIHsga2V5OiBcIkV4cHJlc3Npb25BdHRyaWJ1dGVWYWx1ZXNcIiB9XSB9LFxuICAgICAgICB7IGtleTogXCJVcGRhdGVcIiwgY2hpbGRyZW46IFt7IGtleTogXCJLZXlcIiB9LCB7IGtleTogXCJFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzXCIgfV0gfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFtcbiAgICB7XG4gICAgICBrZXk6IFwiSXRlbUNvbGxlY3Rpb25NZXRyaWNzXCIsXG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBjaGlsZHJlbjogW3sga2V5OiBcIkl0ZW1Db2xsZWN0aW9uS2V5XCIgfV0sXG4gICAgICB9LFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3RydWN0b3IocmVhZG9ubHkgaW5wdXQ6IFRyYW5zYWN0V3JpdGVDb21tYW5kSW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoXG4gICAgY2xpZW50U3RhY2s6IE1pZGRsZXdhcmVTdGFjazxTZXJ2aWNlSW5wdXRUeXBlcywgU2VydmljZU91dHB1dFR5cGVzPixcbiAgICBjb25maWd1cmF0aW9uOiBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsXG4gICAgb3B0aW9ucz86IF9fSHR0cEhhbmRsZXJPcHRpb25zXG4gICk6IEhhbmRsZXI8VHJhbnNhY3RXcml0ZUNvbW1hbmRJbnB1dCwgVHJhbnNhY3RXcml0ZUNvbW1hbmRPdXRwdXQ+IHtcbiAgICBjb25zdCB7IG1hcnNoYWxsT3B0aW9ucywgdW5tYXJzaGFsbE9wdGlvbnMgfSA9IGNvbmZpZ3VyYXRpb24udHJhbnNsYXRlQ29uZmlnIHx8IHt9O1xuICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgX19UcmFuc2FjdFdyaXRlSXRlbXNDb21tYW5kKG1hcnNoYWxsSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGhhbmRsZXIoY29tbWFuZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBvdXRwdXQ6IHVubWFyc2hhbGxPdXRwdXQoZGF0YS5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuIl19