"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchWriteCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * BatchWriteItemCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class BatchWriteCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            {
                key: "RequestItems",
                children: {
                    children: [
                        { key: "PutRequest", children: [{ key: "Item" }] },
                        { key: "DeleteRequest", children: [{ key: "Key" }] },
                    ],
                },
            },
        ];
        this.outputKeyNodes = [
            {
                key: "UnprocessedItems",
                children: {
                    children: [
                        { key: "PutRequest", children: [{ key: "Item" }] },
                        { key: "DeleteRequest", children: [{ key: "Key" }] },
                    ],
                },
            },
            {
                key: "ItemCollectionMetrics",
                children: {
                    children: [{ key: "ItemCollectionKey" }],
                },
            },
        ];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.BatchWriteItemCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.BatchWriteCommand = BatchWriteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF0Y2hXcml0ZUNvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvQmF0Y2hXcml0ZUNvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0EsNkNBQW9FO0FBQ3BFLDhEQVFrQztBQUNsQywwREFBNkQ7QUF3QzdEOzs7Ozs7R0FNRztBQUNILE1BQWEsaUJBQWtCLFNBQVEsdUJBSXRDO0lBOEJDLFlBQXFCLEtBQTZCO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRFcsVUFBSyxHQUFMLEtBQUssQ0FBd0I7UUE3QmpDLGtCQUFhLEdBQUc7WUFDL0I7Z0JBQ0UsR0FBRyxFQUFFLGNBQWM7Z0JBQ25CLFFBQVEsRUFBRTtvQkFDUixRQUFRLEVBQUU7d0JBQ1IsRUFBRSxHQUFHLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUU7d0JBQ2xELEVBQUUsR0FBRyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFO3FCQUNyRDtpQkFDRjthQUNGO1NBQ0YsQ0FBQztRQUNlLG1CQUFjLEdBQUc7WUFDaEM7Z0JBQ0UsR0FBRyxFQUFFLGtCQUFrQjtnQkFDdkIsUUFBUSxFQUFFO29CQUNSLFFBQVEsRUFBRTt3QkFDUixFQUFFLEdBQUcsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTt3QkFDbEQsRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUU7cUJBQ3JEO2lCQUNGO2FBQ0Y7WUFDRDtnQkFDRSxHQUFHLEVBQUUsdUJBQXVCO2dCQUM1QixRQUFRLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQztpQkFDekM7YUFDRjtTQUNGLENBQUM7SUFJRixDQUFDO0lBRUQ7O09BRUc7SUFDSCxpQkFBaUIsQ0FDZixXQUFtRSxFQUNuRSxhQUFtRCxFQUNuRCxPQUE4QjtRQUU5QixNQUFNLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLEdBQUcsYUFBYSxDQUFDLGVBQWUsSUFBSSxFQUFFLENBQUM7UUFDbkYsTUFBTSxPQUFPLEdBQUcsSUFBSSx1Q0FBdUIsQ0FBQyxJQUFBLHFCQUFhLEVBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDLENBQUM7UUFDNUcsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxhQUFhLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFL0UsT0FBTyxLQUFLLElBQUksRUFBRTtZQUNoQixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNwQyxPQUFPO2dCQUNMLEdBQUcsSUFBSTtnQkFDUCxNQUFNLEVBQUUsSUFBQSx3QkFBZ0IsRUFBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsaUJBQWlCLENBQUM7YUFDOUUsQ0FBQztRQUNKLENBQUMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTFERCw4Q0EwREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsIFNlcnZpY2VJbnB1dFR5cGVzLCBTZXJ2aWNlT3V0cHV0VHlwZXMgfSBmcm9tIFwiLi4vRHluYW1vREJEb2N1bWVudENsaWVudFwiO1xuaW1wb3J0IHsgbWFyc2hhbGxJbnB1dCwgdW5tYXJzaGFsbE91dHB1dCB9IGZyb20gXCIuLi9jb21tYW5kcy91dGlsc1wiO1xuaW1wb3J0IHtcbiAgRGVsZXRlUmVxdWVzdCxcbiAgSXRlbUNvbGxlY3Rpb25NZXRyaWNzLFxuICBQdXRSZXF1ZXN0LFxuICBXcml0ZVJlcXVlc3QsXG4gIEJhdGNoV3JpdGVJdGVtQ29tbWFuZCBhcyBfX0JhdGNoV3JpdGVJdGVtQ29tbWFuZCxcbiAgQmF0Y2hXcml0ZUl0ZW1Db21tYW5kSW5wdXQgYXMgX19CYXRjaFdyaXRlSXRlbUNvbW1hbmRJbnB1dCxcbiAgQmF0Y2hXcml0ZUl0ZW1Db21tYW5kT3V0cHV0IGFzIF9fQmF0Y2hXcml0ZUl0ZW1Db21tYW5kT3V0cHV0LFxufSBmcm9tIFwiQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RiXCI7XG5pbXBvcnQgeyBDb21tYW5kIGFzICRDb21tYW5kIH0gZnJvbSBcIkBhd3Mtc2RrL3NtaXRoeS1jbGllbnRcIjtcbmltcG9ydCB7IEhhbmRsZXIsIE1pZGRsZXdhcmVTdGFjaywgSHR0cEhhbmRsZXJPcHRpb25zIGFzIF9fSHR0cEhhbmRsZXJPcHRpb25zIH0gZnJvbSBcIkBhd3Mtc2RrL3R5cGVzXCI7XG5pbXBvcnQgeyBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IGZyb20gXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCI7XG5cbmV4cG9ydCB0eXBlIEJhdGNoV3JpdGVDb21tYW5kSW5wdXQgPSBPbWl0PF9fQmF0Y2hXcml0ZUl0ZW1Db21tYW5kSW5wdXQsIFwiUmVxdWVzdEl0ZW1zXCI+ICYge1xuICBSZXF1ZXN0SXRlbXM6XG4gICAgfCB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IChPbWl0PFdyaXRlUmVxdWVzdCwgXCJQdXRSZXF1ZXN0XCIgfCBcIkRlbGV0ZVJlcXVlc3RcIj4gJiB7XG4gICAgICAgICAgUHV0UmVxdWVzdD86IE9taXQ8UHV0UmVxdWVzdCwgXCJJdGVtXCI+ICYge1xuICAgICAgICAgICAgSXRlbTogeyBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZSB9IHwgdW5kZWZpbmVkO1xuICAgICAgICAgIH07XG4gICAgICAgICAgRGVsZXRlUmVxdWVzdD86IE9taXQ8RGVsZXRlUmVxdWVzdCwgXCJLZXlcIj4gJiB7XG4gICAgICAgICAgICBLZXk6IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfSB8IHVuZGVmaW5lZDtcbiAgICAgICAgICB9O1xuICAgICAgICB9KVtdO1xuICAgICAgfVxuICAgIHwgdW5kZWZpbmVkO1xufTtcblxuZXhwb3J0IHR5cGUgQmF0Y2hXcml0ZUNvbW1hbmRPdXRwdXQgPSBPbWl0PFxuICBfX0JhdGNoV3JpdGVJdGVtQ29tbWFuZE91dHB1dCxcbiAgXCJVbnByb2Nlc3NlZEl0ZW1zXCIgfCBcIkl0ZW1Db2xsZWN0aW9uTWV0cmljc1wiXG4+ICYge1xuICBVbnByb2Nlc3NlZEl0ZW1zPzoge1xuICAgIFtrZXk6IHN0cmluZ106IChPbWl0PFdyaXRlUmVxdWVzdCwgXCJQdXRSZXF1ZXN0XCIgfCBcIkRlbGV0ZVJlcXVlc3RcIj4gJiB7XG4gICAgICBQdXRSZXF1ZXN0PzogT21pdDxQdXRSZXF1ZXN0LCBcIkl0ZW1cIj4gJiB7XG4gICAgICAgIEl0ZW06IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfSB8IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgICBEZWxldGVSZXF1ZXN0PzogT21pdDxEZWxldGVSZXF1ZXN0LCBcIktleVwiPiAmIHtcbiAgICAgICAgS2V5OiB7IFtrZXk6IHN0cmluZ106IE5hdGl2ZUF0dHJpYnV0ZVZhbHVlIH0gfCB1bmRlZmluZWQ7XG4gICAgICB9O1xuICAgIH0pW107XG4gIH07XG4gIEl0ZW1Db2xsZWN0aW9uTWV0cmljcz86IHtcbiAgICBba2V5OiBzdHJpbmddOiAoT21pdDxJdGVtQ29sbGVjdGlvbk1ldHJpY3MsIFwiSXRlbUNvbGxlY3Rpb25LZXlcIj4gJiB7XG4gICAgICBJdGVtQ29sbGVjdGlvbktleT86IHsgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWUgfTtcbiAgICB9KVtdO1xuICB9O1xufTtcblxuLyoqXG4gKiBBY2NlcHRzIG5hdGl2ZSBKYXZhU2NyaXB0IHR5cGVzIGluc3RlYWQgb2YgYEF0dHJpYnV0ZVZhbHVlYHMsIGFuZCBjYWxsc1xuICogQmF0Y2hXcml0ZUl0ZW1Db21tYW5kIG9wZXJhdGlvbiBmcm9tIHtAbGluayBodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9AYXdzLXNkay9jbGllbnQtZHluYW1vZGIgQGF3cy1zZGsvY2xpZW50LWR5bmFtb2RifS5cbiAqXG4gKiBKYXZhU2NyaXB0IG9iamVjdHMgcGFzc2VkIGluIGFzIHBhcmFtZXRlcnMgYXJlIG1hcnNoYWxsZWQgaW50byBgQXR0cmlidXRlVmFsdWVgIHNoYXBlc1xuICogcmVxdWlyZWQgYnkgQW1hem9uIER5bmFtb0RCLiBSZXNwb25zZXMgZnJvbSBEeW5hbW9EQiBhcmUgdW5tYXJzaGFsbGVkIGludG8gcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICovXG5leHBvcnQgY2xhc3MgQmF0Y2hXcml0ZUNvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZDxcbiAgQmF0Y2hXcml0ZUNvbW1hbmRJbnB1dCxcbiAgQmF0Y2hXcml0ZUNvbW1hbmRPdXRwdXQsXG4gIER5bmFtb0RCRG9jdW1lbnRDbGllbnRSZXNvbHZlZENvbmZpZ1xuPiB7XG4gIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRLZXlOb2RlcyA9IFtcbiAgICB7XG4gICAgICBrZXk6IFwiUmVxdWVzdEl0ZW1zXCIsXG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgIHsga2V5OiBcIlB1dFJlcXVlc3RcIiwgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtXCIgfV0gfSxcbiAgICAgICAgICB7IGtleTogXCJEZWxldGVSZXF1ZXN0XCIsIGNoaWxkcmVuOiBbeyBrZXk6IFwiS2V5XCIgfV0gfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcbiAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRLZXlOb2RlcyA9IFtcbiAgICB7XG4gICAgICBrZXk6IFwiVW5wcm9jZXNzZWRJdGVtc1wiLFxuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICB7IGtleTogXCJQdXRSZXF1ZXN0XCIsIGNoaWxkcmVuOiBbeyBrZXk6IFwiSXRlbVwiIH1dIH0sXG4gICAgICAgICAgeyBrZXk6IFwiRGVsZXRlUmVxdWVzdFwiLCBjaGlsZHJlbjogW3sga2V5OiBcIktleVwiIH1dIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgIH0sXG4gICAge1xuICAgICAga2V5OiBcIkl0ZW1Db2xsZWN0aW9uTWV0cmljc1wiLFxuICAgICAgY2hpbGRyZW46IHtcbiAgICAgICAgY2hpbGRyZW46IFt7IGtleTogXCJJdGVtQ29sbGVjdGlvbktleVwiIH1dLFxuICAgICAgfSxcbiAgICB9LFxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGlucHV0OiBCYXRjaFdyaXRlQ29tbWFuZElucHV0KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHJlc29sdmVNaWRkbGV3YXJlKFxuICAgIGNsaWVudFN0YWNrOiBNaWRkbGV3YXJlU3RhY2s8U2VydmljZUlucHV0VHlwZXMsIFNlcnZpY2VPdXRwdXRUeXBlcz4sXG4gICAgY29uZmlndXJhdGlvbjogRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLFxuICAgIG9wdGlvbnM/OiBfX0h0dHBIYW5kbGVyT3B0aW9uc1xuICApOiBIYW5kbGVyPEJhdGNoV3JpdGVDb21tYW5kSW5wdXQsIEJhdGNoV3JpdGVDb21tYW5kT3V0cHV0PiB7XG4gICAgY29uc3QgeyBtYXJzaGFsbE9wdGlvbnMsIHVubWFyc2hhbGxPcHRpb25zIH0gPSBjb25maWd1cmF0aW9uLnRyYW5zbGF0ZUNvbmZpZyB8fCB7fTtcbiAgICBjb25zdCBjb21tYW5kID0gbmV3IF9fQmF0Y2hXcml0ZUl0ZW1Db21tYW5kKG1hcnNoYWxsSW5wdXQodGhpcy5pbnB1dCwgdGhpcy5pbnB1dEtleU5vZGVzLCBtYXJzaGFsbE9wdGlvbnMpKTtcbiAgICBjb25zdCBoYW5kbGVyID0gY29tbWFuZC5yZXNvbHZlTWlkZGxld2FyZShjbGllbnRTdGFjaywgY29uZmlndXJhdGlvbiwgb3B0aW9ucyk7XG5cbiAgICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IGhhbmRsZXIoY29tbWFuZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5kYXRhLFxuICAgICAgICBvdXRwdXQ6IHVubWFyc2hhbGxPdXRwdXQoZGF0YS5vdXRwdXQsIHRoaXMub3V0cHV0S2V5Tm9kZXMsIHVubWFyc2hhbGxPcHRpb25zKSxcbiAgICAgIH07XG4gICAgfTtcbiAgfVxufVxuIl19