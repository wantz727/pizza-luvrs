"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchGetCommand = void 0;
const utils_1 = require("../commands/utils");
const client_dynamodb_1 = require("@aws-sdk/client-dynamodb");
const smithy_client_1 = require("@aws-sdk/smithy-client");
/**
 * Accepts native JavaScript types instead of `AttributeValue`s, and calls
 * BatchGetItemCommand operation from {@link https://www.npmjs.com/package/@aws-sdk/client-dynamodb @aws-sdk/client-dynamodb}.
 *
 * JavaScript objects passed in as parameters are marshalled into `AttributeValue` shapes
 * required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects.
 */
class BatchGetCommand extends smithy_client_1.Command {
    constructor(input) {
        super();
        this.input = input;
        this.inputKeyNodes = [
            {
                key: "RequestItems",
                children: {
                    children: [{ key: "Keys" }],
                },
            },
        ];
        this.outputKeyNodes = [
            { key: "Responses", children: {} },
            {
                key: "UnprocessedKeys",
                children: {
                    children: [{ key: "Keys" }],
                },
            },
        ];
    }
    /**
     * @internal
     */
    resolveMiddleware(clientStack, configuration, options) {
        const { marshallOptions, unmarshallOptions } = configuration.translateConfig || {};
        const command = new client_dynamodb_1.BatchGetItemCommand((0, utils_1.marshallInput)(this.input, this.inputKeyNodes, marshallOptions));
        const handler = command.resolveMiddleware(clientStack, configuration, options);
        return async () => {
            const data = await handler(command);
            return {
                ...data,
                output: (0, utils_1.unmarshallOutput)(data.output, this.outputKeyNodes, unmarshallOptions),
            };
        };
    }
}
exports.BatchGetCommand = BatchGetCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF0Y2hHZXRDb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL0JhdGNoR2V0Q29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSw2Q0FBb0U7QUFDcEUsOERBS2tDO0FBQ2xDLDBEQUE2RDtBQW1DN0Q7Ozs7OztHQU1HO0FBQ0gsTUFBYSxlQUFnQixTQUFRLHVCQUlwQztJQW1CQyxZQUFxQixLQUEyQjtRQUM5QyxLQUFLLEVBQUUsQ0FBQztRQURXLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBbEIvQixrQkFBYSxHQUFHO1lBQy9CO2dCQUNFLEdBQUcsRUFBRSxjQUFjO2dCQUNuQixRQUFRLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7aUJBQzVCO2FBQ0Y7U0FDRixDQUFDO1FBQ2UsbUJBQWMsR0FBRztZQUNoQyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtZQUNsQztnQkFDRSxHQUFHLEVBQUUsaUJBQWlCO2dCQUN0QixRQUFRLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLENBQUM7aUJBQzVCO2FBQ0Y7U0FDRixDQUFDO0lBSUYsQ0FBQztJQUVEOztPQUVHO0lBQ0gsaUJBQWlCLENBQ2YsV0FBbUUsRUFDbkUsYUFBbUQsRUFDbkQsT0FBOEI7UUFFOUIsTUFBTSxFQUFFLGVBQWUsRUFBRSxpQkFBaUIsRUFBRSxHQUFHLGFBQWEsQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDO1FBQ25GLE1BQU0sT0FBTyxHQUFHLElBQUkscUNBQXFCLENBQUMsSUFBQSxxQkFBYSxFQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQzFHLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsYUFBYSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRS9FLE9BQU8sS0FBSyxJQUFJLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEdBQUcsTUFBTSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDcEMsT0FBTztnQkFDTCxHQUFHLElBQUk7Z0JBQ1AsTUFBTSxFQUFFLElBQUEsd0JBQWdCLEVBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLGlCQUFpQixDQUFDO2FBQzlFLENBQUM7UUFDSixDQUFDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUEvQ0QsMENBK0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnLCBTZXJ2aWNlSW5wdXRUeXBlcywgU2VydmljZU91dHB1dFR5cGVzIH0gZnJvbSBcIi4uL0R5bmFtb0RCRG9jdW1lbnRDbGllbnRcIjtcbmltcG9ydCB7IG1hcnNoYWxsSW5wdXQsIHVubWFyc2hhbGxPdXRwdXQgfSBmcm9tIFwiLi4vY29tbWFuZHMvdXRpbHNcIjtcbmltcG9ydCB7XG4gIEtleXNBbmRBdHRyaWJ1dGVzLFxuICBCYXRjaEdldEl0ZW1Db21tYW5kIGFzIF9fQmF0Y2hHZXRJdGVtQ29tbWFuZCxcbiAgQmF0Y2hHZXRJdGVtQ29tbWFuZElucHV0IGFzIF9fQmF0Y2hHZXRJdGVtQ29tbWFuZElucHV0LFxuICBCYXRjaEdldEl0ZW1Db21tYW5kT3V0cHV0IGFzIF9fQmF0Y2hHZXRJdGVtQ29tbWFuZE91dHB1dCxcbn0gZnJvbSBcIkBhd3Mtc2RrL2NsaWVudC1keW5hbW9kYlwiO1xuaW1wb3J0IHsgQ29tbWFuZCBhcyAkQ29tbWFuZCB9IGZyb20gXCJAYXdzLXNkay9zbWl0aHktY2xpZW50XCI7XG5pbXBvcnQgeyBIYW5kbGVyLCBNaWRkbGV3YXJlU3RhY2ssIEh0dHBIYW5kbGVyT3B0aW9ucyBhcyBfX0h0dHBIYW5kbGVyT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgTmF0aXZlQXR0cmlidXRlVmFsdWUgfSBmcm9tIFwiQGF3cy1zZGsvdXRpbC1keW5hbW9kYlwiO1xuXG5leHBvcnQgdHlwZSBCYXRjaEdldENvbW1hbmRJbnB1dCA9IE9taXQ8X19CYXRjaEdldEl0ZW1Db21tYW5kSW5wdXQsIFwiUmVxdWVzdEl0ZW1zXCI+ICYge1xuICBSZXF1ZXN0SXRlbXM6XG4gICAgfCB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE9taXQ8S2V5c0FuZEF0dHJpYnV0ZXMsIFwiS2V5c1wiPiAmIHtcbiAgICAgICAgICBLZXlzOlxuICAgICAgICAgICAgfCB7XG4gICAgICAgICAgICAgICAgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWU7XG4gICAgICAgICAgICAgIH1bXVxuICAgICAgICAgICAgfCB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgdHlwZSBCYXRjaEdldENvbW1hbmRPdXRwdXQgPSBPbWl0PF9fQmF0Y2hHZXRJdGVtQ29tbWFuZE91dHB1dCwgXCJSZXNwb25zZXNcIiB8IFwiVW5wcm9jZXNzZWRLZXlzXCI+ICYge1xuICBSZXNwb25zZXM/OiB7XG4gICAgW2tleTogc3RyaW5nXToge1xuICAgICAgW2tleTogc3RyaW5nXTogTmF0aXZlQXR0cmlidXRlVmFsdWU7XG4gICAgfVtdO1xuICB9O1xuICBVbnByb2Nlc3NlZEtleXM/OiB7XG4gICAgW2tleTogc3RyaW5nXTogT21pdDxLZXlzQW5kQXR0cmlidXRlcywgXCJLZXlzXCI+ICYge1xuICAgICAgS2V5czpcbiAgICAgICAgfCB7XG4gICAgICAgICAgICBba2V5OiBzdHJpbmddOiBOYXRpdmVBdHRyaWJ1dGVWYWx1ZTtcbiAgICAgICAgICB9W11cbiAgICAgICAgfCB1bmRlZmluZWQ7XG4gICAgfTtcbiAgfTtcbn07XG5cbi8qKlxuICogQWNjZXB0cyBuYXRpdmUgSmF2YVNjcmlwdCB0eXBlcyBpbnN0ZWFkIG9mIGBBdHRyaWJ1dGVWYWx1ZWBzLCBhbmQgY2FsbHNcbiAqIEJhdGNoR2V0SXRlbUNvbW1hbmQgb3BlcmF0aW9uIGZyb20ge0BsaW5rIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0Bhd3Mtc2RrL2NsaWVudC1keW5hbW9kYiBAYXdzLXNkay9jbGllbnQtZHluYW1vZGJ9LlxuICpcbiAqIEphdmFTY3JpcHQgb2JqZWN0cyBwYXNzZWQgaW4gYXMgcGFyYW1ldGVycyBhcmUgbWFyc2hhbGxlZCBpbnRvIGBBdHRyaWJ1dGVWYWx1ZWAgc2hhcGVzXG4gKiByZXF1aXJlZCBieSBBbWF6b24gRHluYW1vREIuIFJlc3BvbnNlcyBmcm9tIER5bmFtb0RCIGFyZSB1bm1hcnNoYWxsZWQgaW50byBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYXRjaEdldENvbW1hbmQgZXh0ZW5kcyAkQ29tbWFuZDxcbiAgQmF0Y2hHZXRDb21tYW5kSW5wdXQsXG4gIEJhdGNoR2V0Q29tbWFuZE91dHB1dCxcbiAgRHluYW1vREJEb2N1bWVudENsaWVudFJlc29sdmVkQ29uZmlnXG4+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnB1dEtleU5vZGVzID0gW1xuICAgIHtcbiAgICAgIGtleTogXCJSZXF1ZXN0SXRlbXNcIixcbiAgICAgIGNoaWxkcmVuOiB7XG4gICAgICAgIGNoaWxkcmVuOiBbeyBrZXk6IFwiS2V5c1wiIH1dLFxuICAgICAgfSxcbiAgICB9LFxuICBdO1xuICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dEtleU5vZGVzID0gW1xuICAgIHsga2V5OiBcIlJlc3BvbnNlc1wiLCBjaGlsZHJlbjoge30gfSxcbiAgICB7XG4gICAgICBrZXk6IFwiVW5wcm9jZXNzZWRLZXlzXCIsXG4gICAgICBjaGlsZHJlbjoge1xuICAgICAgICBjaGlsZHJlbjogW3sga2V5OiBcIktleXNcIiB9XSxcbiAgICAgIH0sXG4gICAgfSxcbiAgXTtcblxuICBjb25zdHJ1Y3RvcihyZWFkb25seSBpbnB1dDogQmF0Y2hHZXRDb21tYW5kSW5wdXQpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcmVzb2x2ZU1pZGRsZXdhcmUoXG4gICAgY2xpZW50U3RhY2s6IE1pZGRsZXdhcmVTdGFjazxTZXJ2aWNlSW5wdXRUeXBlcywgU2VydmljZU91dHB1dFR5cGVzPixcbiAgICBjb25maWd1cmF0aW9uOiBEeW5hbW9EQkRvY3VtZW50Q2xpZW50UmVzb2x2ZWRDb25maWcsXG4gICAgb3B0aW9ucz86IF9fSHR0cEhhbmRsZXJPcHRpb25zXG4gICk6IEhhbmRsZXI8QmF0Y2hHZXRDb21tYW5kSW5wdXQsIEJhdGNoR2V0Q29tbWFuZE91dHB1dD4ge1xuICAgIGNvbnN0IHsgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsT3B0aW9ucyB9ID0gY29uZmlndXJhdGlvbi50cmFuc2xhdGVDb25maWcgfHwge307XG4gICAgY29uc3QgY29tbWFuZCA9IG5ldyBfX0JhdGNoR2V0SXRlbUNvbW1hbmQobWFyc2hhbGxJbnB1dCh0aGlzLmlucHV0LCB0aGlzLmlucHV0S2V5Tm9kZXMsIG1hcnNoYWxsT3B0aW9ucykpO1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjb21tYW5kLnJlc29sdmVNaWRkbGV3YXJlKGNsaWVudFN0YWNrLCBjb25maWd1cmF0aW9uLCBvcHRpb25zKTtcblxuICAgIHJldHVybiBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgaGFuZGxlcihjb21tYW5kKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmRhdGEsXG4gICAgICAgIG91dHB1dDogdW5tYXJzaGFsbE91dHB1dChkYXRhLm91dHB1dCwgdGhpcy5vdXRwdXRLZXlOb2RlcywgdW5tYXJzaGFsbE9wdGlvbnMpLFxuICAgICAgfTtcbiAgICB9O1xuICB9XG59XG4iXX0=