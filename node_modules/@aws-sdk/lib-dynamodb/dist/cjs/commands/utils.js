"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.unmarshallOutput = exports.marshallInput = void 0;
const util_dynamodb_1 = require("@aws-sdk/util-dynamodb");
const processObj = (obj, processFunc, children) => {
    if (obj) {
        if (!children || (Array.isArray(children) && children.length === 0)) {
            // Leaf of KeyNode, process the object.
            return processFunc(obj);
        }
        else {
            // Not leaf node, process the children.
            if (Array.isArray(children)) {
                // Specific keys of children need to be processed.
                return processKeysInObj(obj, processFunc, children);
            }
            else {
                // All children require processing.
                return processAllKeysInObj(obj, processFunc, children.children);
            }
        }
    }
    return undefined;
};
const processKeyInObj = (obj, processFunc, children) => {
    if (Array.isArray(obj)) {
        return obj.map((item) => processObj(item, processFunc, children));
    }
    return processObj(obj, processFunc, children);
};
const processKeysInObj = (obj, processFunc, keyNodes) => keyNodes.reduce((acc, { key, children }) => ({
    ...acc,
    [key]: processKeyInObj(acc[key], processFunc, children),
}), obj);
const processAllKeysInObj = (obj, processFunc, children) => Object.entries(obj).reduce((acc, [key, value]) => ({
    ...acc,
    [key]: processKeyInObj(value, processFunc, children),
}), {});
const marshallInput = (obj, keyNodes, options) => {
    const marshallFunc = (toMarshall) => (0, util_dynamodb_1.marshall)(toMarshall, options);
    return processKeysInObj(obj, marshallFunc, keyNodes);
};
exports.marshallInput = marshallInput;
const unmarshallOutput = (obj, keyNodes, options) => {
    const unmarshallFunc = (toMarshall) => (0, util_dynamodb_1.unmarshall)(toMarshall, options);
    return processKeysInObj(obj, unmarshallFunc, keyNodes);
};
exports.unmarshallOutput = unmarshallOutput;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQWtHO0FBV2xHLE1BQU0sVUFBVSxHQUFHLENBQUMsR0FBUSxFQUFFLFdBQXFCLEVBQUUsUUFBK0IsRUFBTyxFQUFFO0lBQzNGLElBQUksR0FBRyxFQUFFO1FBQ1AsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsRUFBRTtZQUNuRSx1Q0FBdUM7WUFDdkMsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7YUFBTTtZQUNMLHVDQUF1QztZQUN2QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQzNCLGtEQUFrRDtnQkFDbEQsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3JEO2lCQUFNO2dCQUNMLG1DQUFtQztnQkFDbkMsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqRTtTQUNGO0tBQ0Y7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRixNQUFNLGVBQWUsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUFxQixFQUFFLFFBQStCLEVBQU8sRUFBRTtJQUNoRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdEIsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBQ0QsT0FBTyxVQUFVLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNoRCxDQUFDLENBQUM7QUFFRixNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBUSxFQUFFLFdBQXFCLEVBQUUsUUFBbUIsRUFBRSxFQUFFLENBQ2hGLFFBQVEsQ0FBQyxNQUFNLENBQ2IsQ0FBQyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0IsR0FBRyxHQUFHO0lBQ04sQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7Q0FDeEQsQ0FBQyxFQUNGLEdBQUcsQ0FDSixDQUFDO0FBRUosTUFBTSxtQkFBbUIsR0FBRyxDQUFDLEdBQVEsRUFBRSxXQUFxQixFQUFFLFFBQStCLEVBQU8sRUFBRSxDQUNwRyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FDeEIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEIsR0FBRyxHQUFHO0lBQ04sQ0FBQyxHQUFHLENBQUMsRUFBRSxlQUFlLENBQUMsS0FBSyxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUM7Q0FDckQsQ0FBQyxFQUNGLEVBQUUsQ0FDSCxDQUFDO0FBRUcsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFRLEVBQUUsUUFBbUIsRUFBRSxPQUF5QixFQUFFLEVBQUU7SUFDeEYsTUFBTSxZQUFZLEdBQUcsQ0FBQyxVQUFlLEVBQUUsRUFBRSxDQUFDLElBQUEsd0JBQVEsRUFBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDeEUsT0FBTyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQztBQUhXLFFBQUEsYUFBYSxpQkFHeEI7QUFFSyxNQUFNLGdCQUFnQixHQUFHLENBQUMsR0FBUSxFQUFFLFFBQW1CLEVBQUUsT0FBMkIsRUFBRSxFQUFFO0lBQzdGLE1BQU0sY0FBYyxHQUFHLENBQUMsVUFBZSxFQUFFLEVBQUUsQ0FBQyxJQUFBLDBCQUFVLEVBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVFLE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxFQUFFLGNBQWMsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN6RCxDQUFDLENBQUM7QUFIVyxRQUFBLGdCQUFnQixvQkFHM0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXJzaGFsbCwgbWFyc2hhbGxPcHRpb25zLCB1bm1hcnNoYWxsLCB1bm1hcnNoYWxsT3B0aW9ucyB9IGZyb20gXCJAYXdzLXNkay91dGlsLWR5bmFtb2RiXCI7XG5cbmV4cG9ydCB0eXBlIEtleU5vZGUgPSB7XG4gIGtleTogc3RyaW5nO1xuICBjaGlsZHJlbj86IEtleU5vZGVbXSB8IEFsbE5vZGVzO1xufTtcblxuZXhwb3J0IHR5cGUgQWxsTm9kZXMgPSB7XG4gIGNoaWxkcmVuPzogS2V5Tm9kZVtdIHwgQWxsTm9kZXM7XG59O1xuXG5jb25zdCBwcm9jZXNzT2JqID0gKG9iajogYW55LCBwcm9jZXNzRnVuYzogRnVuY3Rpb24sIGNoaWxkcmVuPzogS2V5Tm9kZVtdIHwgQWxsTm9kZXMpOiBhbnkgPT4ge1xuICBpZiAob2JqKSB7XG4gICAgaWYgKCFjaGlsZHJlbiB8fCAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSkge1xuICAgICAgLy8gTGVhZiBvZiBLZXlOb2RlLCBwcm9jZXNzIHRoZSBvYmplY3QuXG4gICAgICByZXR1cm4gcHJvY2Vzc0Z1bmMob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm90IGxlYWYgbm9kZSwgcHJvY2VzcyB0aGUgY2hpbGRyZW4uXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gU3BlY2lmaWMga2V5cyBvZiBjaGlsZHJlbiBuZWVkIHRvIGJlIHByb2Nlc3NlZC5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NLZXlzSW5PYmoob2JqLCBwcm9jZXNzRnVuYywgY2hpbGRyZW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQWxsIGNoaWxkcmVuIHJlcXVpcmUgcHJvY2Vzc2luZy5cbiAgICAgICAgcmV0dXJuIHByb2Nlc3NBbGxLZXlzSW5PYmoob2JqLCBwcm9jZXNzRnVuYywgY2hpbGRyZW4uY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufTtcblxuY29uc3QgcHJvY2Vzc0tleUluT2JqID0gKG9iajogYW55LCBwcm9jZXNzRnVuYzogRnVuY3Rpb24sIGNoaWxkcmVuPzogS2V5Tm9kZVtdIHwgQWxsTm9kZXMpOiBhbnkgPT4ge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgcmV0dXJuIG9iai5tYXAoKGl0ZW06IGFueSkgPT4gcHJvY2Vzc09iaihpdGVtLCBwcm9jZXNzRnVuYywgY2hpbGRyZW4pKTtcbiAgfVxuICByZXR1cm4gcHJvY2Vzc09iaihvYmosIHByb2Nlc3NGdW5jLCBjaGlsZHJlbik7XG59O1xuXG5jb25zdCBwcm9jZXNzS2V5c0luT2JqID0gKG9iajogYW55LCBwcm9jZXNzRnVuYzogRnVuY3Rpb24sIGtleU5vZGVzOiBLZXlOb2RlW10pID0+XG4gIGtleU5vZGVzLnJlZHVjZShcbiAgICAoYWNjLCB7IGtleSwgY2hpbGRyZW4gfSkgPT4gKHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtrZXldOiBwcm9jZXNzS2V5SW5PYmooYWNjW2tleV0sIHByb2Nlc3NGdW5jLCBjaGlsZHJlbiksXG4gICAgfSksXG4gICAgb2JqXG4gICk7XG5cbmNvbnN0IHByb2Nlc3NBbGxLZXlzSW5PYmogPSAob2JqOiBhbnksIHByb2Nlc3NGdW5jOiBGdW5jdGlvbiwgY2hpbGRyZW4/OiBLZXlOb2RlW10gfCBBbGxOb2Rlcyk6IGFueSA9PlxuICBPYmplY3QuZW50cmllcyhvYmopLnJlZHVjZShcbiAgICAoYWNjLCBba2V5LCB2YWx1ZV0pID0+ICh7XG4gICAgICAuLi5hY2MsXG4gICAgICBba2V5XTogcHJvY2Vzc0tleUluT2JqKHZhbHVlLCBwcm9jZXNzRnVuYywgY2hpbGRyZW4pLFxuICAgIH0pLFxuICAgIHt9XG4gICk7XG5cbmV4cG9ydCBjb25zdCBtYXJzaGFsbElucHV0ID0gKG9iajogYW55LCBrZXlOb2RlczogS2V5Tm9kZVtdLCBvcHRpb25zPzogbWFyc2hhbGxPcHRpb25zKSA9PiB7XG4gIGNvbnN0IG1hcnNoYWxsRnVuYyA9ICh0b01hcnNoYWxsOiBhbnkpID0+IG1hcnNoYWxsKHRvTWFyc2hhbGwsIG9wdGlvbnMpO1xuICByZXR1cm4gcHJvY2Vzc0tleXNJbk9iaihvYmosIG1hcnNoYWxsRnVuYywga2V5Tm9kZXMpO1xufTtcblxuZXhwb3J0IGNvbnN0IHVubWFyc2hhbGxPdXRwdXQgPSAob2JqOiBhbnksIGtleU5vZGVzOiBLZXlOb2RlW10sIG9wdGlvbnM/OiB1bm1hcnNoYWxsT3B0aW9ucykgPT4ge1xuICBjb25zdCB1bm1hcnNoYWxsRnVuYyA9ICh0b01hcnNoYWxsOiBhbnkpID0+IHVubWFyc2hhbGwodG9NYXJzaGFsbCwgb3B0aW9ucyk7XG4gIHJldHVybiBwcm9jZXNzS2V5c0luT2JqKG9iaiwgdW5tYXJzaGFsbEZ1bmMsIGtleU5vZGVzKTtcbn07XG4iXX0=